{"meta":{"title":"UTF-8対応のBase64を自作する","date":"2021-08-21","category":"Algorithm","description":"バイナリーを型付配列で扱う美しい実装","ogp":"/media/base64.webp"},"body":"<p>TypeScriptでBase64を自作します。Denoの場合標準ライブラリにBase64が実装されていますので実際に利用する際はそちらを使ってください。</p>\n<h2>完成品</h2>\n<p>一応Denoパッケージとしても公開しています。<br>\n<a href=\"https://github.com/kota-yata/ky_base64\">https://github.com/kota-yata/ky_base64</a></p>\n<h2>処理の流れ</h2>\n<h4>エンコーダー</h4>\n<p>Base64エンコードの大まかな流れは、</p>\n<ul>\n<li>文字列のバイナリーを6bitsで区切る</li>\n<li>余ったビットは末尾に0を加えて6bitsにする</li>\n<li>予め定められている変換表に対応する文字に変換する</li>\n<li>文字数が4の整数倍に満たない場合は=で埋め合わせる</li>\n</ul>\n<p>という、割と単純なアルゴリズムです。最も楽に書きたいのであればバイナリーを文字列として扱うのが良いでしょう（8bits⇨6bitsが非常に楽）。しかしそれはすでに非推奨になっている、Windowオブジェクトのbtoa()がやっていたことであり、2021年に許される書き方ではありません。なので今回はバイナリーをバイナリーとして扱って実装します。</p>\n<h4>デコーダー</h4>\n<p>デコーダーの処理の流れは</p>\n<ul>\n<li>変換表に沿って文字を6bitsに変換する</li>\n<li>6bitsから8bitsに区切り直す</li>\n<li>UTF-8デコードで文字列にする</li>\n</ul>\n<p>こちらも同様にバイナリーはバイナリーとして扱います。</p>\n<h1>実装</h1>\n<h2>エンコーダー</h2>\n<h3>文字列をUTF-8コードに変換する</h3>\n<pre><code class=\"language-ts\"><span class=\"hljs-keyword\">const</span> encoder = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TextEncoder</span>();\n<span class=\"hljs-keyword\">const</span> uint8Array = encoder.<span class=\"hljs-title function_\">encode</span>(str); <span class=\"hljs-comment\">// strは入力の文字列</span>\n</code></pre>\n<p>JavaScriptの内部エンコーディングはUTF-16なので<code>str.charCodeAt(n)</code>をするとUTF-16の値が返ってくるのですが、幸い<a href=\"https://developer.mozilla.org/ja/docs/Web/API/TextEncoder\">TextEncoder</a>を使えばUTF-8のストリームをTypedArray (Uint8Array)で受け取れます。これが無いとUTF-8エンコーダーを自作する必要があったので本当にありがたいです。</p>\n<h3>シフト演算で6bitsに切り分ける</h3>\n<p>Uint8Arrayからいきなり6bitsに分けることはできないので、各8bitsをシフト演算で切り分け、前の8bitsの後ろ部分と次の8bitsの前部分を足して6bitsの値を作ります。</p>\n<pre><code class=\"language-ts\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">splitNum</span> = (<span class=\"hljs-params\">num: <span class=\"hljs-built_in\">number</span>, i: <span class=\"hljs-built_in\">number</span></span>) =&gt; {\n  <span class=\"hljs-keyword\">let</span> bitsToShift = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">const</span> mod = i % <span class=\"hljs-number\">3</span>;\n  <span class=\"hljs-keyword\">if</span> (mod === <span class=\"hljs-number\">0</span> || mod === <span class=\"hljs-number\">3</span>) {\n    bitsToShift = <span class=\"hljs-number\">2</span>;\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (mod === <span class=\"hljs-number\">1</span>) {\n    bitsToShift = <span class=\"hljs-number\">4</span>;\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (mod === <span class=\"hljs-number\">2</span>) {\n    bitsToShift = <span class=\"hljs-number\">6</span>;\n  }\n  <span class=\"hljs-keyword\">const</span> mainBits = (num &gt;&gt;&gt; bitsToShift);\n  <span class=\"hljs-keyword\">const</span> extraBits = (num &lt;&lt; (<span class=\"hljs-number\">6</span> - bitsToShift)) % <span class=\"hljs-number\">64</span>;\n  <span class=\"hljs-keyword\">return</span> { mainBits, extraBits };\n};\n</code></pre>\n<p><code>splitNum</code>はUTF-8のエンコード値とその値の配列内インデックスを渡されます。数値を区切る位置を決めるには前の数値の後ろ部分がどれだけ残ったかがわかる必要があります。純粋にやるならその値も引数として渡してしまうという手がありますが、実は8bitsから6bitsを切り分けていくと、区切る位置に周期が見られます。<br>\n<img src=\"https://user-images.githubusercontent.com/51294895/130304873-23105773-7c09-4c83-8ab4-f8d23ed4f068.png\" alt=\"base64\"><br>\n上の画像のように、周期を3として2,4,6,2,4,6…と区切る位置が繰り返しになっている、つまり<eq><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mspace></mspace><mspace width=\"0.6667em\"/><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mtext> </mtext><mtext> </mtext><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">i\\mod3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace allowbreak\"></span><span class=\"mspace\" style=\"margin-right:0.6667em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">mod</span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">3</span></span></span></span></eq>を取れば区切る位置が判明するのです。区切る位置を<code>bitsToShift</code>に格納し、前部分は符号なし右シフト、後ろ部分は左シフトの後64(2の6乗)のmodをとって6bitsに収めます。</p>\n<pre><code class=\"language-ts\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">convert8to6</span> = (<span class=\"hljs-params\">uint8Array: <span class=\"hljs-built_in\">Uint8Array</span></span>) =&gt; {\n  <span class=\"hljs-keyword\">let</span> extra = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">new6BitsArray</span>: <span class=\"hljs-built_in\">number</span>[] = [];\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; uint8Array.<span class=\"hljs-property\">length</span>; i++) {\n    <span class=\"hljs-keyword\">const</span> num = uint8Array[i];\n    <span class=\"hljs-keyword\">const</span> splitted = <span class=\"hljs-title function_\">splitNum</span>(num, i);\n    <span class=\"hljs-keyword\">const</span> main = splitted.<span class=\"hljs-property\">mainBits</span> + extra;\n    new6BitsArray.<span class=\"hljs-title function_\">push</span>(main);\n    <span class=\"hljs-keyword\">if</span> (i % <span class=\"hljs-number\">3</span> === <span class=\"hljs-number\">2</span> || i === uint8Array.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>) {\n      new6BitsArray.<span class=\"hljs-title function_\">push</span>(splitted.<span class=\"hljs-property\">extraBits</span>);\n      extra = <span class=\"hljs-number\">0</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n      extra = splitted.<span class=\"hljs-property\">extraBits</span>;\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> new6BitsArray;\n};\n</code></pre>\n<p>上のコードにおいて、<code>convert8to6</code>の入力はUTF-8のエンコード結果です。その数値一つ一つを<code>splitNum</code>に渡し、刻まれた前部分を<code>extra</code>に格納されている、前の数値の後ろ部分と加算します。<code>splitNum</code>が正しく動作すればその結果は必ず6bits(0~63)に収まるので、それを<code>new6BitsArray</code>に入れて返り値とします。上で述べたように区切る位置の周期は3で、6ビット目で区切るループの際は<code>extraBits</code>も6bitsになります。そして配列の最後も0を詰めて6bitsにする決まりなので、<eq><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mspace></mspace><mspace width=\"0.6667em\"/><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mtext> </mtext><mtext> </mtext><mn>3</mn><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">i\\mod3=2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace allowbreak\"></span><span class=\"mspace\" style=\"margin-right:0.6667em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">mod</span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span></eq>もしくは最後のループの場合は<code>extraBits</code>も結果に出力します。それ以外の場合は<code>extraBits</code>を次の数値の前部分と足すために<code>extra</code>変数に一時的に代入します。</p>\n<p>最後のループの処理に0を詰める処理がない理由は、<code>extraBits</code>は<code>splitNum</code>関数ですでに左ビットシフトされており、その時点で余った部分に0が詰められているからです。</p>\n<h3>変換表を使って6bitsを文字列に変換する</h3>\n<p>Base64で使われる表は以下の通りです。（表書くのめんどいので画像です）<br>\n<img src=\"https://www.woolha.com/media/2020/12/base64-table.png\" alt=\"table\"></p>\n<pre><code class=\"language-ts\"><span class=\"hljs-keyword\">const</span> base64Chars = <span class=\"hljs-string\">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>\n<span class=\"hljs-keyword\">const</span> generateEncodeResult = (<span class=\"hljs-attr\">new6BitsArray</span>: <span class=\"hljs-built_in\">number</span>[]): <span class=\"hljs-function\"><span class=\"hljs-params\">string</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> mod4 = new6BitsArray.<span class=\"hljs-property\">length</span> % <span class=\"hljs-number\">4</span> === <span class=\"hljs-number\">0</span>\n    ? <span class=\"hljs-number\">0</span>\n    : <span class=\"hljs-number\">4</span> - (new6BitsArray.<span class=\"hljs-property\">length</span> % <span class=\"hljs-number\">4</span>);\n  <span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-string\">&quot;&quot;</span>;\n  new6BitsArray.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">bits: <span class=\"hljs-built_in\">number</span></span>) =&gt;</span> {\n    result += base64Chars[bits];\n  });\n  result += <span class=\"hljs-string\">&quot;=&quot;</span>.<span class=\"hljs-title function_\">repeat</span>(mod4);\n  <span class=\"hljs-keyword\">return</span> result;\n};\n</code></pre>\n<p>変換表は文字列として<code>base64Chars</code>に格納し、6bitsの数値をインデックスに検索します。最後に4の整数倍に満たない分=を加え、エンコーダーの完成です。</p>\n<h2>デコーダー</h2>\n<h3>変換表に沿って文字を6bitsに変換し、そのまま8bitsに区切り直す</h3>\n<p>文字から数値に変換する処理と8bitsに区切り直す処理を分けてしまうと2回走査する必要があるので、まとめて一度にやってしまいます。</p>\n<pre><code class=\"language-ts\"><span class=\"hljs-keyword\">const</span> base64ToUint8Array = (<span class=\"hljs-attr\">base64Str</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-function\"><span class=\"hljs-params\">Uint8Array</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> strArray = base64Str.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/=/g</span>, <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&quot;&quot;</span>);\n  <span class=\"hljs-keyword\">const</span> lengthAs8Bits = (strArray.<span class=\"hljs-property\">length</span> * <span class=\"hljs-number\">6</span> / <span class=\"hljs-number\">8</span>);\n  <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Uint8Array</span>(lengthAs8Bits);\n  <span class=\"hljs-keyword\">let</span> connection = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">let</span> uintIterator = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// Because not every process in the loop below pushes to result array.</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; strArray.<span class=\"hljs-property\">length</span>; i++) {\n    <span class=\"hljs-keyword\">const</span> tableIndex = base64Chars.<span class=\"hljs-title function_\">indexOf</span>(strArray[i]);\n    <span class=\"hljs-keyword\">const</span> mod = i % <span class=\"hljs-number\">4</span>;\n    <span class=\"hljs-keyword\">if</span> (mod === <span class=\"hljs-number\">0</span>) {\n      connection = tableIndex &lt;&lt; <span class=\"hljs-number\">2</span>;\n      <span class=\"hljs-keyword\">continue</span>;\n    }\n    <span class=\"hljs-keyword\">const</span> bitsToShift = <span class=\"hljs-number\">6</span> - mod * <span class=\"hljs-number\">2</span>;\n    connection += tableIndex &gt;&gt;&gt; bitsToShift;\n    result[uintIterator] = connection;\n    uintIterator++;\n    <span class=\"hljs-keyword\">const</span> extra = tableIndex &lt;&lt; (<span class=\"hljs-number\">8</span> - bitsToShift);\n    connection = extra % <span class=\"hljs-number\">256</span>;\n  }\n  <span class=\"hljs-keyword\">return</span> result;\n};\n</code></pre>\n<p><code>Base64ToUint8Array</code>はBase64のエンコード文字列を引数に取ります。後にUTF-8デコードで<a href=\"https://developer.mozilla.org/ja/docs/Web/API/TextDecoder\">TextDecoderクラス</a>を使うのですが、その引数はUint8Arrayなのでこの関数でも返り値となる<code>result</code>変数はUint8Arrayです。<br>\n8bitsに区切り直す過程はエンコーダーの時と似た感じで、周期を4として区切る位置が決まります。<eq><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mspace></mspace><mspace width=\"0.6667em\"/><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mtext> </mtext><mtext> </mtext><mn>4</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">i\\mod4=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace allowbreak\"></span><span class=\"mspace\" style=\"margin-right:0.6667em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">mod</span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span></eq>の際は前の数値の後ろ部分が代入されている<code>connection</code>に何も入っていない、つまり数値を区切る必要はなく6bits全て<code>connection</code>に代入すれば良いので例外処理として先に済ませています。それ以外の場合は<code>6 - mod * 2</code>で区切る位置が判明します。気になる方は6bitsを続けて書いて8bitsで刻んでみると区切り位置がこの式と一致しているのがわかると思います。そして<code>connection</code>に左シフトを済ませた後ろ部分を代入して次のループに移ります。</p>\n<p><code>result</code>に値を入れる際にforループのイテレータではなく<code>uintIterator</code>なる別のイテレータを使っているのは、先に述べたように<eq><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mspace></mspace><mspace width=\"0.6667em\"/><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mtext> </mtext><mtext> </mtext><mn>4</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">i\\mod4=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace allowbreak\"></span><span class=\"mspace\" style=\"margin-right:0.6667em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">mod</span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span></eq>の場合は例外処理が走るのでforループのイテレータと格納すべき配列のインデックスがズレるからです。さらにTypedArrayは通常の配列のようにpushで末尾に加えていくことができないため、別のイテレータを作って毎度インクリメントする必要があるのです。</p>\n<h3>UTF-8デコードで文字列に戻す</h3>\n<pre><code class=\"language-ts\"><span class=\"hljs-keyword\">const</span> uint8Array = <span class=\"hljs-title function_\">base64ToUint8Array</span>(encodedStr);\n<span class=\"hljs-keyword\">const</span> decoder = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TextDecoder</span>();\n<span class=\"hljs-keyword\">const</span> result = decoder.<span class=\"hljs-title function_\">decode</span>(uint8Array);\n<span class=\"hljs-keyword\">return</span> result;\n</code></pre>\n<p>エンコード時と同様にJSの<a href=\"https://developer.mozilla.org/ja/docs/Web/API/TextDecoder\">TextDecoderクラス</a>にお世話になります。Uint8Arrayを引数に渡せばデコード結果の文字列が返され、これがBase64のデコード結果になります。</p>\n<h1>おわりに</h1>\n<p>やはりこういうバイナリーを扱う処理にTSは向いてないですね。</p>\n"}