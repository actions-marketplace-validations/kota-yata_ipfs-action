{"meta":{"title":"TypeScriptでハフマン符号を作る","date":"2021-03-23","category":"Algorithm","description":"バイナリーを文字列で扱うJavaScriptな実装","ogp":"/media/huffman.webp"},"body":"<p>最近圧縮アルゴリズムに興味が出てきたんですが、いきなり重いのやると挫折するので比較的理解しやすいとどっかのブログに書いてあったハフマン符号をTypeScriptで作ります。ちゃんとデコードもします。</p>\n<p>完成品はこちら<br>\n<a href=\"https://github.com/kota-yata/deno-huffman\">https://github.com/kota-yata/deno-huffman</a></p>\n<p>型に関しては、全てnumber型とstring型だけでどうにかします。なのでビット列は全てstring型として扱います。</p>\n<h1>ハフマン符号って何ですか</h1>\n<p>「なめてんのかお前」って思った人は次の章に進んで大丈夫です。</p>\n<p>ハフマン符号は戦後間もない1952年にデイビッドさんが発明した圧縮アルゴリズムです。文字の出現頻度を調べて、頻出する文字には少ないビット列を、あまり出てこない文字には長いビット列を割り当ててデータ量の削減を実現しています。ZipとかJPEGの圧縮にも使われていることでも有名ですね。</p>\n<p>ハフマン符号の長所として、<strong>接頭符号</strong>であることが挙げられます。接頭符号というのは、ある符号が他の符号の最初の部分と重複しないという性質です。例えば、</p>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>文字</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>A</td>\n</tr>\n<tr>\n<td>1</td>\n<td>B</td>\n</tr>\n<tr>\n<td>01</td>\n<td>C</td>\n</tr>\n</tbody>\n</table>\n<p>という符号があった場合、Aの符号０がCの符号の最初と同じになっているので接頭符号とは言えません。これで何が困るのかというと、エンコードされたビット列の中に「01」があった場合、デコードされた文字は「AB」と「C」のどちらもあり得るのです。デコードされる文字列がエンコード前と違ったらそれはもう可逆圧縮とは言えませんね。</p>\n<p>もう一つ、ハフマン符号が広く使われる理由として、著作権の問題がないことも挙げられます。先述の通り、ハフマン符号はかなり歴史の長いアルゴリズムなのでより効率の良いアルゴリズムもいくつかすでに発明されています。ただそのほとんどは著作権が絡んで自由に使えなかったりするので、いまだに圧縮性能としては中程度のハフマン符号が使われているわけです。</p>\n<h1>大まかな流れ</h1>\n<h3>エンコード</h3>\n<ol>\n<li>ハフマン符号は文字の出現頻度を元に木を作るので、まずは平文を探索して文字の出現頻度を調べます</li>\n<li>各文字の出現頻度がわかったらそれを元にハフマン木を作ります</li>\n<li>ハフマン木が無事に作れたらそこから各文字に対応するビット列を算出してテーブルを作ります</li>\n<li>それが終わったらもう一度平文を探索して各文字をビット列に変換していきます</li>\n<li>最後にデコード用にハフマン木そのものをエンコードしてヘッダーとしてエンコード結果と繋げ、ハフマン符号化完了になります</li>\n</ol>\n<p>以上のように、エンコードの際に合計で2回平文を走査します。しかしこれではデータ量が莫大になったときに圧縮時間が長くなってしまうので、出現頻度を調べながらビット列への変換を行い、走査を1回で済ませる<strong>動的ハフマン符号</strong>というものも存在します。動的ハフマン符号は処理時間は短いですがハフマン木の精度は落ちることがあります。<br>\n今回は動的ハフマン符号ではなく、普通に2回走査する<strong>静的ハフマン符号</strong>を実装します。</p>\n<h3>デコード</h3>\n<ol>\n<li>まずはヘッダーを読んでテーブルを再生成します</li>\n<li>テーブルができたら残りのビット列を文字列に変換してデコード終了です</li>\n</ol>\n<p>デコードに関してはテーブルさえ手に入れば何も苦労はないので比較的簡単に処理が終わります。</p>\n<h1>前提条件</h1>\n<p>よく使う型はこんな感じで定義しています。独自の型が出てきて何だこれってなったらここに戻って確認してください</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">type</span> treeArray = [<span class=\"hljs-built_in\">string</span> | <span class=\"hljs-literal\">null</span>, <span class=\"hljs-built_in\">number</span>, [treeArray, treeArray]?];\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">type</span> rebuiltTreeArray = [\n  <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-literal\">null</span>,\n  [rebuiltTreeArray, rebuiltTreeArray]?,\n];\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">type</span> occurrenceArray = treeArray[];\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">type</span> bitsTable = [<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">string</span>][];\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> dividedObj {\n  <span class=\"hljs-attr\">spliced</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">remaining</span>: <span class=\"hljs-built_in\">string</span>;\n}\n</code></pre>\n<p>処理の中で、何回も使うものは別ファイルに関数として定義しています。</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-comment\">// 文字をビット列に変換する</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> convertSymbolToBits = (<span class=\"hljs-attr\">symbol</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-function\"><span class=\"hljs-params\">string</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">bits</span>: <span class=\"hljs-built_in\">string</span> = symbol.<span class=\"hljs-title function_\">charCodeAt</span>(<span class=\"hljs-number\">0</span>).<span class=\"hljs-title function_\">toString</span>(<span class=\"hljs-number\">2</span>);\n  <span class=\"hljs-keyword\">return</span> bits;\n};\n\n<span class=\"hljs-comment\">// ビット列を文字に変換する</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> convertBitsToSymbol = (<span class=\"hljs-attr\">bits</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-function\"><span class=\"hljs-params\">string</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">symbol</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-title class_\">String</span>.<span class=\"hljs-title function_\">fromCharCode</span>(<span class=\"hljs-built_in\">parseInt</span>(bits, <span class=\"hljs-number\">2</span>));\n  <span class=\"hljs-keyword\">return</span> symbol;\n};\n\n<span class=\"hljs-comment\">// 第一引数の長さになるように第二引数の前に0を追加する</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> padding = (<span class=\"hljs-attr\">len</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">string</span>: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-function\"><span class=\"hljs-params\">string</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">pre</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">&quot;0&quot;</span>.<span class=\"hljs-title function_\">repeat</span>(len);\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">result</span>: <span class=\"hljs-built_in\">string</span> = (pre + <span class=\"hljs-built_in\">string</span>).<span class=\"hljs-title function_\">slice</span>(-len);\n  <span class=\"hljs-keyword\">return</span> result;\n};\n</code></pre>\n<h1>エンコード</h1>\n<p>お待たせしました。<br>\n今回は参考にした<a href=\"https://engineering.purdue.edu/ece264/17au/hw/HW13?alt=huffman\">このサイト</a>で使われていた「go go gophers」という文字列を例にとってエンコードとデコードをしたいと思います。</p>\n<h3>平文から各文字の出現頻度を調べる</h3>\n<p>まずは一度平文を走査して各文字の出現頻度を調べます。</p>\n<pre><code class=\"language-typescript:\">const getOccurence = (plane: string): occurrenceArray =&gt; {\n  let string: string = plane;\n  const occurrenceArray: occurrenceArray = new Array(0) as occurrenceArray;\n  while (string.length &gt; 0) {\n    const regexString: string = string[0].replace(/[-\\/\\\\^$*+?.()|\\[\\]{}]/g, &quot;\\\\$&amp;&quot;);\n    const regExp = new RegExp(regexString, &quot;g&quot;);\n    const occurrence: number = (string.match(regExp) || []).length;\n    const relation: treeArray = [string[0], occurrence];\n    occurrenceArray.push(relation);\n    string = string.replace(regExp, &quot;&quot;);\n  }\n  return occurrenceArray;\n};\n</code></pre>\n<p>ここでやっていることとしては、whileループの中で、文字列の最初を切り出し、その文字が文字列の中にどれくらい含まれているかを<code>string.match(regExp).length</code>で調べています。文字と出現回数を配列に格納したのち、文字列からその文字全てを削除し、次のループに入っています。<br>\nこの関数で得られる配列は以下のような感じです。</p>\n<pre><code class=\"language-typescript\">occurrenceArray = [\n  [ <span class=\"hljs-string\">&quot;g&quot;</span>, <span class=\"hljs-number\">3</span> ],\n  [ <span class=\"hljs-string\">&quot;o&quot;</span>, <span class=\"hljs-number\">3</span> ],\n  [ <span class=\"hljs-string\">&quot; &quot;</span>, <span class=\"hljs-number\">2</span> ],\n  [ <span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-number\">1</span> ],\n  [ <span class=\"hljs-string\">&quot;h&quot;</span>, <span class=\"hljs-number\">1</span> ],\n  [ <span class=\"hljs-string\">&quot;e&quot;</span>, <span class=\"hljs-number\">1</span> ],\n  [ <span class=\"hljs-string\">&quot;r&quot;</span>, <span class=\"hljs-number\">1</span> ],\n  [ <span class=\"hljs-string\">&quot;s&quot;</span>, <span class=\"hljs-number\">1</span> ]\n]\n</code></pre>\n<h3>出現頻度の情報からハフマン木を作る</h3>\n<p>木の作り方は、まず出現頻度の低い2つの文字を葉として短い木を作ります。そして2つの文字の出現回数を足した回数と他の文字の出現回数を比べ、再び低い方から2つを使って木を作ります。最終的に僕のコードで生成された木は以下のような感じです。僕のコードで、というのはアルゴリズムによってはちょっと違う構造になることがあるからです。最終的な圧縮率は変わらないのでそんなに気にするとこではないです。<br>\n<img src=\"https://storage.googleapis.com/zenn-user-upload/vb3645r6qz3hvb62lxttip0v5pi4\" alt=\"\"></p>\n<p>コードで木を表現する方法としては、連想配列やNodeListなどでも可能ですが、今回は多次元配列を用いて木構造を表現しようと思います。</p>\n<pre><code>[文字 or null, 出現回数, [[左の子],[右の子]]]\n</code></pre>\n<p>1要素目に文字が来る場合は葉なので、3要素目はありません。以下の<code>generateTree.ts</code>で木を生成します。</p>\n<pre><code class=\"language-typescript:\">const generateTree = (occurrenceArray: occurrenceArray): occurrenceArray =&gt; {\n  if (occurrenceArray.length &lt;= 1) return occurrenceArray;\n  sortQuickly(occurrenceArray);\n  const parsedArray: treeArray = [\n    null,\n    occurrenceArray[0][1] + occurrenceArray[1][1],\n    [occurrenceArray[0], occurrenceArray[1]],\n  ];\n  occurrenceArray.splice(0, 2);\n  occurrenceArray.unshift(parsedArray);\n  return generateTree(occurrenceArray);\n};\n</code></pre>\n<p>先ほど作成した出現回数の配列を書き換える形で木を作ります。<br>\nまず配列を出現頻度でソートします。</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-title function_\">sortQuickly</span>(occurrenceArray);\n</code></pre>\n<p>ここは</p>\n<pre><code class=\"language-typescript\">occurrenceArray.<span class=\"hljs-title function_\">sort</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> a[<span class=\"hljs-number\">1</span>].<span class=\"hljs-property\">length</span> - b[<span class=\"hljs-number\">1</span>].<span class=\"hljs-property\">length</span>;\n});\n</code></pre>\n<p>でも構わないのですが、せっかくなのでクイックソートで書きました。趣味です。</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">const</span> partitioning = ( <span class=\"hljs-attr\">mda</span>: occurrenceArray, <span class=\"hljs-attr\">start</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">end</span>: <span class=\"hljs-built_in\">number</span> ): <span class=\"hljs-function\"><span class=\"hljs-params\">number</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">pivot</span>: <span class=\"hljs-built_in\">number</span> = mda[end][<span class=\"hljs-number\">1</span>];\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">pivotIndex</span>: <span class=\"hljs-built_in\">number</span> = start;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">i</span>: <span class=\"hljs-built_in\">number</span> = start; i &lt; end; i++) {\n    <span class=\"hljs-keyword\">if</span> (mda[i][<span class=\"hljs-number\">1</span>] &gt; pivot) <span class=\"hljs-keyword\">continue</span>;\n    [mda[i], mda[pivotIndex]] = [mda[pivotIndex], mda[i]];\n    pivotIndex++;\n  }\n  [mda[pivotIndex], mda[end]] = [mda[end], mda[pivotIndex]];\n  <span class=\"hljs-keyword\">return</span> pivotIndex;\n};\n\n<span class=\"hljs-keyword\">const</span> sortQuickly = ( <span class=\"hljs-attr\">mda</span>: occurrenceArray, <span class=\"hljs-attr\">start</span>: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">end</span>: <span class=\"hljs-built_in\">number</span> = mda.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span> ): <span class=\"hljs-function\"><span class=\"hljs-params\">void</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">if</span> (start &gt;= end) <span class=\"hljs-keyword\">return</span>;\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">pivotIndex</span>: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-title function_\">partitioning</span>(mda, start, end);\n  <span class=\"hljs-title function_\">sortQuickly</span>(mda, start, pivotIndex - <span class=\"hljs-number\">1</span>);\n  <span class=\"hljs-title function_\">sortQuickly</span>(mda, pivotIndex + <span class=\"hljs-number\">1</span>, end);\n};\n</code></pre>\n<p>最初の行で1要素目が文字だった場合の条件分岐はできているのでソートされた配列の1,2要素目（=頻度の少ない方から1,2番目）をマージして新しい木構造を作ります。</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">parsedArray</span>: treeArray = [\n  <span class=\"hljs-literal\">null</span>,\n  occurrenceArray[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>] + occurrenceArray[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>], <span class=\"hljs-comment\">// 2つの出現回数を足す</span>\n  [occurrenceArray[<span class=\"hljs-number\">0</span>], occurrenceArray[<span class=\"hljs-number\">1</span>]], <span class=\"hljs-comment\">// 子要素として追加する</span>\n];\n<span class=\"hljs-comment\">// 最初の2要素を削除して代わりに生成した木を挿入する</span>\noccurrenceArray.<span class=\"hljs-title function_\">splice</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>);\noccurrenceArray.<span class=\"hljs-title function_\">unshift</span>(parsedArray);\n<span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">generateTree</span>(occurrenceArray); <span class=\"hljs-comment\">// 配列が最終的に全て木構造になるまで再帰する</span>\n</code></pre>\n<h3>ハフマン木から文字とビット列の変換表を作る</h3>\n<pre><code class=\"language-typescript:generateBitsTable.ts\">const generateBitsTableFromTreeArray = ( tree: treeArray, bitsTable: bitsTable = new Array(0) as bitsTable, bit: string = &quot;&quot; ): bitsTable =&gt; {\n  if (tree[0] !== null) {\n    bitsTable.push([tree[0], bit]);\n    return bitsTable;\n  }\n  // tree[0]がnullなのに3要素目がないということはつまり節なのに子がいないということなのでエラー\n  if (!tree[2]) {\n    throw new Error(&quot;You assigned wrong tree as argument&quot;);\n  }\n  // まずは左の子要素を探索しに行く\n  const nextBitsTable: bitsTable = generateBitsTableFromTreeArray(\n    tree[2][0],\n    bitsTable,\n    bit + &quot;0&quot;,\n  );\n  // 左の子を全て探索したらそのbitsTableを受け取って右の子の探索に向かう\n  return generateBitsTableFromTreeArray(tree[2][1], nextBitsTable, bit + &quot;1&quot;);\n};\n</code></pre>\n<p>木は完成しているのであとは文字と符号の変換表を作るだけです。具体的には木の左の枝を0、右を1として木の根から再帰的に辿っていき、1要素目が文字列=葉に行き着いたらそれまで辿った枝のビットを繋げたものを符号としてテーブルに格納します。</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">if</span> (tree[<span class=\"hljs-number\">0</span>] !== <span class=\"hljs-literal\">null</span>) {\n  bitsTable.<span class=\"hljs-title function_\">push</span>([tree[<span class=\"hljs-number\">0</span>], bit]);\n  <span class=\"hljs-keyword\">return</span> bitsTable;\n}\n</code></pre>\n<p>tree[0]がnullでないということは子要素がない、つまり葉なので、文字と<code>bit</code>に格納してあるこれまで辿ってきた枝のビット列を配列として変換表<code>bitsTable</code>にpushして上の節に戻ります。</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-comment\">// tree[0]がnullなのに3要素目がないということはつまり節なのに子がいないということなのでエラー</span>\n<span class=\"hljs-keyword\">if</span> (!tree[<span class=\"hljs-number\">2</span>]) {\n  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&quot;You assigned wrong tree as argument&quot;</span>);\n}\n<span class=\"hljs-comment\">// まずは左の子要素を探索しに行く</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">nextBitsTable</span>: bitsTable = <span class=\"hljs-title function_\">generateBitsTableFromTreeArray</span>(\n  tree[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">0</span>],\n  bitsTable,\n  bit + <span class=\"hljs-string\">&quot;0&quot;</span>,\n);\n<span class=\"hljs-comment\">// 左の子を全て探索したらそのbitsTableを受け取って右の子の探索に向かう</span>\n<span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">generateBitsTableFromTreeArray</span>(tree[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">1</span>], nextBitsTable, bit + <span class=\"hljs-string\">&quot;1&quot;</span>);\n</code></pre>\n<p>コメントで大体説明していますが、左の子を奥深くまで探索したあとに変換表を引き継いで右の子の探索に移ります。これを再帰的に行うことでハフマン木から変換表の生成が可能になります。<br>\n変換表の完成形はこんな感じ。</p>\n<pre><code class=\"language-typescript\">bitsTable = [\n  [ <span class=\"hljs-string\">&quot;s&quot;</span>, <span class=\"hljs-string\">&quot;000&quot;</span> ],\n  [ <span class=\"hljs-string\">&quot;e&quot;</span>, <span class=\"hljs-string\">&quot;0010&quot;</span> ],\n  [ <span class=\"hljs-string\">&quot;r&quot;</span>, <span class=\"hljs-string\">&quot;0011&quot;</span> ],\n  [ <span class=\"hljs-string\">&quot;g&quot;</span>, <span class=\"hljs-string\">&quot;01&quot;</span> ],\n  [ <span class=\"hljs-string\">&quot;o&quot;</span>, <span class=\"hljs-string\">&quot;10&quot;</span> ],\n  [ <span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-string\">&quot;1100&quot;</span> ],\n  [ <span class=\"hljs-string\">&quot;h&quot;</span>, <span class=\"hljs-string\">&quot;1101&quot;</span> ],\n  [ <span class=\"hljs-string\">&quot; &quot;</span>, <span class=\"hljs-string\">&quot;111&quot;</span> ]\n]\n</code></pre>\n<h3>文字列をエンコードする</h3>\n<p>変換表が完成したら、もう一度文字列を走査して各文字を符号に変換していきます。</p>\n<pre><code class=\"language-typescript:getResult.ts\">const generateResultBits = ( plane: string, bitsTable: bitsTable ): string =&gt; {\n  let stringArray: string[] = [];\n  let bitArray: string[] = [];\n  for (let i = 0; i &lt; bitsTable.length; i++) {\n    [stringArray[i], bitArray[i]] = [bitsTable[i][0], bitsTable[i][1]];\n  }\n  let resultString = &quot;&quot;;\n  // 文字列配列の中で対象の文字とマッチするインデックスのビット列を結果に追加する\n  for (let i = 0; i &lt; plane.length; i++) {\n    const index: number = stringArray.indexOf(plane[i]);\n    resultString += bitArray[index];\n  }\n  return resultString;\n};\n</code></pre>\n<p>ここでは一旦変換表<code>bitsTable</code>を文字の配列と符号の配列に分割して、文字の配列の方で<code>indexOf(文字)</code>してそのインデックスの符号を結果に追加しています。別に<code>bitsTable</code>のままでもやろうと思えばできるんでしょうがこっちの方がやりやすかったので分割してます。<br>\nエンコードされた文字列はこうなります。</p>\n<pre><code>0110111011011101101100110100100011000\n</code></pre>\n<h3>ハフマン木自体をエンコードする</h3>\n<p>ハフマン符号は出現頻度で符号が決まるので標準化された変換表なんてものはありません。Qiitaとかの記事を見ると、エンコードした後に変換表だけは変数に格納してそのままデコードで使うなどというチートをしている輩がいたり、そもそもデコード諦めて文字列のエンコード結果だけ出力してハフマン符号らしからぬ圧縮率を叩き出していたりする記事はあったのですがここを詳細に書いてる日本語の記事がなかったので結構困りました。最終的にアメリカの大学の講義録みたいなやつに書いてあった方法で理解しました。<br>\n<a href=\"https://engineering.purdue.edu/ece264/17au/hw/HW13?alt=huffman\">https://engineering.purdue.edu/ece264/17au/hw/HW13?alt=huffman</a><br>\nこの文献を見つけるまでは変換表を素直にビット変換する方法でヘッダーに加えていたのですが、そうすると結局エンコード前とあまり変わらなかったりして「ハフマン符号大したことなくね」とか思ってました。ごめんなさい。</p>\n<pre><code class=\"language-typescript:encodeTree.ts\">const encodeTree = ( huffmanTree: treeArray, resultString: string = &quot;&quot; ): string =&gt; {\n  if (huffmanTree[0] !== null) {\n    const symbolBits: string = convertSymbolToBits(huffmanTree[0]);\n    return resultString += `1${padding(8, symbolBits)}`;\n  }\n  resultString += &quot;0&quot;;\n  if (!huffmanTree[2]) throw new Error(&quot;You assigned wrong array...&quot;);\n  const resultLeft: string = encodeTree(huffmanTree[2][0], resultString);\n  return encodeTree(huffmanTree[2][1], resultLeft);\n};\n</code></pre>\n<p>具体的な方法としては、ハフマン木から変換表を作った時と同様に根から深さ優先探索で左の子から探索し、葉に着いたらそれまでのビットと文字を結果に追加します。<br>\n注意したいのは、この場合探索時に貯めておくビットは枝の値ではなく節の値です。探索している子が節だった場合は0、葉に当たった場合は1を追加しその直後に該当する文字8bits分を追加します。こうすることで1が来たらその後8bitsは文字であることがわかるので、接頭辞なしでデコード時にハフマン木を再構築できるというわけです。</p>\n<h3>ヘッダーとエンコードされた文字列を合体して完成</h3>\n<p>先ほど2回目の走査でエンコードしたビット列と上でエンコードしたハフマン木をつなげたものが出力結果になります。ただ、このままだとどこまでがヘッダーなのかの区切りが分からないので、一番最初にエンコードしたハフマン木の長さを16bitsで入れておきます。<br>\nさっきの大学の文献を見るとこの情報は入れず、別のエンコード方法で区別できるようにしてるっぽいのですがいまいちそこが理解できませんでした。区切りの判別が16bits以内でできるのであれば微々たるものですが圧縮率も上がるので方法が分かる方は教えていただけると嬉しいです。</p>\n<pre><code class=\"language-typescript:encode.ts\">const encodedTree: string = encodeTree(huffmanTree);\nconst encodedTreeLength: string = getEncodedTreeLength(encodedTree);\nconst result: string = generateResultBits(plane, bitsTable);\nreturn encodedTreeLength + encodedTree + result;\n</code></pre>\n<pre><code class=\"language-typescript:encodeTree.ts\">const getEncodedTreeLength = (encodedTree: string): string =&gt; {\n  const lengthNumber: number = encodedTree.length;\n  const lengthBits: string = padding(16, lengthNumber.toString(2));\n  return lengthBits;\n};\n</code></pre>\n<h5>出力結果</h5>\n<pre><code>000000000100111100010111001101011001011011100101011001110101101111001011100001011010001001000000110111011011101101100110100100011000\n</code></pre>\n<h1>デコード</h1>\n<p>デコードはエンコード結果の解析作業みたいなものなので特に引っかかる点はありませんでした。<br>\nデコードの中で文字列を切り分ける作業が多かったので以下の関数を定義しました。</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-comment\">// 刻みたい文字列と刻みたい位置を引数にとって刻んだ方(spliced)と刻みカス(remaining)をオブジェクトで返す</span>\n<span class=\"hljs-keyword\">const</span> spliceString = (<span class=\"hljs-attr\">string</span>: <span class=\"hljs-built_in\">string</span>, <span class=\"hljs-attr\">divisionNumber</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-function\"><span class=\"hljs-params\">dividedObj</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">spliced</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-built_in\">string</span>.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">0</span>, divisionNumber);\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">remaining</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-built_in\">string</span>.<span class=\"hljs-title function_\">slice</span>(divisionNumber);\n  <span class=\"hljs-keyword\">return</span> { spliced, remaining };\n};\n</code></pre>\n<h3>ヘッダーを読む</h3>\n<pre><code class=\"language-typescript\"><span class=\"hljs-comment\">// 最初の16bitsはヘッダーの長さなので切り分けて10進数化する</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">headerBits</span>: dividedObj = <span class=\"hljs-title function_\">spliceString</span>(encodeResult, <span class=\"hljs-number\">16</span>);\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">headerLength</span>: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-built_in\">parseInt</span>(headerBits.<span class=\"hljs-property\">spliced</span>, <span class=\"hljs-number\">2</span>);\n<span class=\"hljs-comment\">// 10進数化した長さの分だけ残りの文字列を切り分けヘッダーと平文のエンコード結果を分割する</span>\n<span class=\"hljs-comment\">// treeAndContents.splicedがヘッダーでtreeAndContents.remainingが平文のエンコード結果</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">treeAndContents</span>: dividedObj = <span class=\"hljs-title function_\">spliceString</span>( headerBits.<span class=\"hljs-property\">remaining</span>, headerLength );\n</code></pre>\n<h3>ハフマン木を再構築する</h3>\n<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">const</span> rebuildHuffmanTree = ( <span class=\"hljs-attr\">bits</span>: <span class=\"hljs-built_in\">string</span>, <span class=\"hljs-attr\">resultArray</span>: rebuiltTreeArray ): <span class=\"hljs-function\"><span class=\"hljs-params\">string</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">if</span> (bits === <span class=\"hljs-string\">&quot;&quot;</span>) <span class=\"hljs-keyword\">return</span> bits;\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">firstBits</span>: <span class=\"hljs-built_in\">string</span> = bits.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>);\n  bits = bits.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">1</span>);\n  <span class=\"hljs-keyword\">if</span> (firstBits === <span class=\"hljs-string\">&quot;1&quot;</span>) {\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">symbolBits</span>: <span class=\"hljs-built_in\">string</span> = bits.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">8</span>);\n    bits = bits.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">8</span>);\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">symbol</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-title function_\">convertBitsToSymbol</span>(symbolBits);\n    resultArray[<span class=\"hljs-number\">0</span>] = symbol;\n    <span class=\"hljs-keyword\">return</span> bits;\n  }\n  resultArray.<span class=\"hljs-title function_\">push</span>([[<span class=\"hljs-literal\">null</span>], [<span class=\"hljs-literal\">null</span>]]);\n  <span class=\"hljs-keyword\">if</span> (!resultArray[<span class=\"hljs-number\">1</span>]) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&quot;resultArray has no index 1&quot;</span>);\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">result</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-title function_\">rebuildHuffmanTree</span>( bits, resultArray[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>] );\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">rebuildHuffmanTree</span>(result, resultArray[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]);\n};\n<span class=\"hljs-comment\">// 使い方</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">rebuiltTree</span>: rebuiltTreeArray = [<span class=\"hljs-literal\">null</span>];\n<span class=\"hljs-title function_\">rebuildHuffmanTree</span>(treeAndContents.<span class=\"hljs-property\">spliced</span>, rebuiltTree);\n</code></pre>\n<p>第一引数の<code>bits</code>には先ほど分割したヘッダーの方を渡し、あらかじめ<code>[ null ]</code>を代入した<code>rebuiltTreeArray</code>型の配列を第二引数にとります。<br>\nヘッダーを1文字ずつ読み、1だったらその後の8bitsを文字に変換して木の1要素目に追加し、0だったら1要素目はすでに<code>null</code>が入っているので二要素目に左と右の子を準備し、左から先に再帰的に探索を行います。<br>\nこの関数では返り値を残りのビット列にすることで末尾の再帰を実現しているので先に配列を作る必要があるのですが、普通に配列返すやり方にできそうなことに今書いてて気づきました。ちょっと再考の余地ありですね。なんでこんな変態みたいな仕様にしたんだろ。<br>\nとにかく、上の処理でエンコード時に一度作ったハフマン木の再構築が完了します。</p>\n<h3>ハフマン木から変換表を作る</h3>\n<p>ここはエンコード時とほぼ同じで、違いは引数にとる木に出現回数の値がないというだけです。</p>\n<pre><code class=\"language-typescript:generateBitsTable.ts\">const generateBitsTableFromRebuiltTreeArray = ( tree: rebuiltTreeArray, bitsTable: bitsTable = new Array(0) as bitsTable, bit: string = &quot;&quot; ): bitsTable =&gt; {\n  if (tree[0] !== null) {\n    bitsTable.push([tree[0], bit]);\n    return bitsTable;\n  }\n  // 出現回数がないので子要素が格納されるインデックスは1になる\n  if (!tree[1]) {\n    throw new Error(&quot;You assigned wrong tree as argument&quot;);\n  }\n  const nextBitsTable: bitsTable = generateBitsTableFromRebuiltTreeArray(tree[1][0], bitsTable, bit + &quot;0&quot;);\n  return generateBitsTableFromRebuiltTreeArray(tree[1][1], nextBitsTable, bit + &quot;1&quot;);\n};\n</code></pre>\n<p>この場面で出現回数は全く必要ないのでエンコード時のハフマン木から出現回数の値を取り除けば上と全く同じ関数がエンコードにも使えます。</p>\n<h3>ビット列をデコードする</h3>\n<p>ヘッダーを読む際にヘッダーと平文のエンコード結果の切り分けが完了し、変換表もできたのであとはエンコード結果を元の平文に戻す作業だけです。</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">const</span> parseBits = (<span class=\"hljs-attr\">bits</span>: <span class=\"hljs-built_in\">string</span>, <span class=\"hljs-attr\">bitsTable</span>: bitsTable): <span class=\"hljs-function\"><span class=\"hljs-params\">string</span> =&gt;</span> {\n  bitsTable.<span class=\"hljs-title function_\">sort</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> a[<span class=\"hljs-number\">1</span>].<span class=\"hljs-property\">length</span> - b[<span class=\"hljs-number\">1</span>].<span class=\"hljs-property\">length</span>;\n  });\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">result</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">&quot;&quot;</span>;\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">queueString</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">&quot;&quot;</span>;\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">remainingBits</span>: <span class=\"hljs-built_in\">string</span> = bits;\n  <span class=\"hljs-keyword\">while</span> (remainingBits !== <span class=\"hljs-string\">&quot;&quot;</span>) {\n    queueString += remainingBits[<span class=\"hljs-number\">0</span>];\n    remainingBits = remainingBits.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; bitsTable.<span class=\"hljs-property\">length</span>; i++) {\n      <span class=\"hljs-keyword\">if</span> (queueString.<span class=\"hljs-property\">length</span> &lt; bitsTable[i][<span class=\"hljs-number\">1</span>].<span class=\"hljs-property\">length</span>) <span class=\"hljs-keyword\">break</span>;\n      <span class=\"hljs-keyword\">if</span> (queueString.<span class=\"hljs-property\">length</span> &gt; bitsTable[i][<span class=\"hljs-number\">1</span>].<span class=\"hljs-property\">length</span>) <span class=\"hljs-keyword\">continue</span>;\n      <span class=\"hljs-keyword\">if</span> (queueString === bitsTable[i][<span class=\"hljs-number\">1</span>]) {\n        result += bitsTable[i][<span class=\"hljs-number\">0</span>];\n        queueString = <span class=\"hljs-string\">&quot;&quot;</span>;\n        <span class=\"hljs-keyword\">break</span>;\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> result;\n};\n</code></pre>\n<p>なぜ今まで再帰で書いていたのに突然ループにするかというと、30000文字くらいのデータで試したところこの部分は流石にスタックオーバーフローしたからです。まあJavaScriptですし仕方ないと言えば仕方ないですね。<br>\nこの部分、エンコード時と同じように<code>bitsTable</code>を文字列の配列とビット列の配列に分割する方法もあるのですが、ビット列を最初から最後まで走査するわけで、indexOfで愚直に探索していては処理が遅くなるわけです（indexOfの中身は普通に線形探索）。それを避けるために、上のコードでは最初にビット列の長さでソートし、キューのビット列の長さと等しい部分でのみ値を比較することでちょっとでも速くしようと試みています。多分意味ある。</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-comment\">// 昇順ソート</span>\nbitsTable.<span class=\"hljs-title function_\">sort</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> a[<span class=\"hljs-number\">1</span>].<span class=\"hljs-property\">length</span> - b[<span class=\"hljs-number\">1</span>].<span class=\"hljs-property\">length</span>;\n});\n</code></pre>\n<p>ここはエンコード時のようにクイックソートにしても良し。</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">while</span> (remainingBits !== <span class=\"hljs-string\">&quot;&quot;</span>) {\n  <span class=\"hljs-comment\">// 最初のビットをキューのビット列に追加</span>\n  queueString += remainingBits[<span class=\"hljs-number\">0</span>];\n  <span class=\"hljs-comment\">// ビット列から最初の文字を削除する</span>\n  remainingBits = remainingBits.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">1</span>);\n  ...\n}\n</code></pre>\n<p>残りのビットが空でない場合、キューに最初のビットを追加します。remainingBitsは関数内で共通なのでここを減らしていけばwhileループは勝手に判断してくれます。</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; bitsTable.<span class=\"hljs-property\">length</span>; i++) {\n  <span class=\"hljs-keyword\">if</span> (queueString.<span class=\"hljs-property\">length</span> &lt; bitsTable[i][<span class=\"hljs-number\">1</span>].<span class=\"hljs-property\">length</span>) <span class=\"hljs-keyword\">break</span>; <span class=\"hljs-comment\">// これ以上探索しても符号の長さが長いものとしか当たらないのでループを抜ける</span>\n  <span class=\"hljs-keyword\">if</span> (queueString.<span class=\"hljs-property\">length</span> &gt; bitsTable[i][<span class=\"hljs-number\">1</span>].<span class=\"hljs-property\">length</span>) <span class=\"hljs-keyword\">continue</span>; <span class=\"hljs-comment\">// まだ長さがたりてないので次のループにスキップ</span>\n  <span class=\"hljs-keyword\">if</span> (queueString === bitsTable[i][<span class=\"hljs-number\">1</span>]) { <span class=\"hljs-comment\">// 一致!!</span>\n    result += bitsTable[i][<span class=\"hljs-number\">0</span>];\n    queueString = <span class=\"hljs-string\">&quot;&quot;</span>;\n    <span class=\"hljs-keyword\">break</span>;\n  }\n}\n</code></pre>\n<p>キューの文字数よりイテレート中の変換表の符号の長さが長い場合は、ソート済みなのでこれ以上探索しても意味がないため親のwhileループに戻ります。変換表の符号の長さが短い場合はまだキューの文字列と等しい符号たちにたどり着いていないだけなので<code>continue</code>で次のループにスキップします。<br>\nキューの文字数よりイテレート中の変換表の符号の長さが等しい場合のみ互いの値を比較し、晴れて一致した場合は結果に変換表の文字を追加し、キューをクリアして親のwhileループに戻ります。<br>\n最終的にwhileループから抜ける際の<code>result</code>には「go go gophers」が格納されているはずです。</p>\n<h1>圧縮の結果</h1>\n<p>以下が「go go gophers」をハフマン符号化した際の結果です。<br>\n<img src=\"https://storage.googleapis.com/zenn-user-upload/xljbq6dbmsh30kvzr4jjsqvuujzq\" alt=\"image\"><br>\nお分かりいただけただろうか。全然successfullじゃありませんね。<br>\n「go go gophers」のような短い文字列の場合、ヘッダーがオーバーヘッドになってむしろエンコード後のサイズの方が大きくなることがあります。実際にこんな短い文字列を圧縮することはないので気にしなくても良いと思いますがサイズが大きくなったら元のデータを返すみたいな処理を加えておいても良さげです。</p>\n<p>ちなみにかの有名な「Lorem ipsum…」のテキストをエンコードした結果は以下の通りです。<br>\n<img src=\"https://storage.googleapis.com/zenn-user-upload/0s923xjodsxkxlu9k0vbk6e4rd6y\" alt=\"image\"><br>\n文字数は450文字くらいですが、60%なのでまあまあ良いんじゃないでしょうか。</p>\n<h1>おわりに</h1>\n<p>Macの予測変換でハフマン木が全然出てこなくて辛かったです。<br>\nQiitaにはゴミ箱のような記事を上げてますがZennは真面目に書きたいので間違っている点やベストプラクティスでない実装があればコメントで教えていただければ幸いです。<br>\nでは</p>\n<h1>参考文献</h1>\n<h5>デイビッド兄貴が書いた論文</h5>\n<p><a href=\"https://ieeexplore.ieee.org/document/4051119\">https://ieeexplore.ieee.org/document/4051119</a></p>\n<h5>purdue大学の文献</h5>\n<p><a href=\"https://engineering.purdue.edu/ece264/17au/hw/HW13?alt=huffman\">https://engineering.purdue.edu/ece264/17au/hw/HW13?alt=huffman</a></p>\n<h5>すごくわかりやすかった日本語文献（Algoful）</h5>\n<p><a href=\"https://algoful.com/Archive/Algorithm/HaffmanEncoding\">https://algoful.com/Archive/Algorithm/HaffmanEncoding</a></p>\n<h5>UUUM攻殻機動隊</h5>\n<p><a href=\"https://system.blog.uuum.jp/entry/2016/03/01/110000\">https://system.blog.uuum.jp/entry/2016/03/01/110000</a></p>\n"}