{"meta":{"title":"ブラウザでファイルの上書き保存ができるぞぉぉ","date":"2020-11-07","category":"Programming","description":"File System Access APIを使ってみる","ogp":"/media/fsaapi.webp"},"body":"<div class=\"message\">\nほとんどのChromiumベースブラウザではこのAPIを使うことができますが、Braveではセキュリティの懸念より利用できない状態になっています。畜生め\n</div>\n<p>↑ <a href=\"https://github.com/brave/brave-browser/issues/11407\">https://github.com/brave/brave-browser/issues/11407</a></p>\n<p>以前までChromeのOrigin TrialsにNative File System APIとして実装されていたローカルファイルへアクセスするAPIが、ついにChrome86から標準機能として搭載され、名前も実装もだいぶ変わっていたので記事に残しておきます。</p>\n<p><a href=\"https://caniuse.com/?search=file%20system%20access%20api\">Can I Use</a>を確認した上での実装をお勧めします</p>\n<h1>File System Access API</h1>\n<p>File System Access APIは主にローカルファイルの読み取り、書き取りを目的としたAPIです。実はファイルだけでなくフォルダの読み取り/書き取りもできますが、今回はファイルの読み取り/書き取りの方法を紹介します。</p>\n<h2>ファイルを読み取る</h2>\n<p>これまでローカルファイルを読み取るには<a href=\"https://www.html5rocks.com/ja/tutorials/file/dndfiles//\">この記事</a>みたいに自分でHTMLタグを足したり、ファイル内容を切ったり貼ったりする必要があり、かなり面倒くさい実装が不可欠でした。<br>\n一方File System Access APIではたった３行で読み込みが完了します。</p>\n<pre><code class=\"language-javascript\">[fileHandle] = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">showOpenFilePicker</span>();\n<span class=\"hljs-keyword\">const</span> file = <span class=\"hljs-keyword\">await</span> fileHandle.<span class=\"hljs-title function_\">getFile</span>();\n<span class=\"hljs-keyword\">const</span> fileContents = <span class=\"hljs-keyword\">await</span> file.<span class=\"hljs-title function_\">text</span>();\n</code></pre>\n<p>このfileContentsをtextareaに代入すれば手軽にファイルの読み取りが完了します。</p>\n<h4>読み取りオプション</h4>\n<p>１行目の<code>showOpenFilePicker</code>は引数でオプションの設定も可能です。</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// 複数ファイルの選択を可能にする</span>\n[fileHandle] = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">showOpenFilePicker</span>({<span class=\"hljs-attr\">multiple</span>: <span class=\"hljs-literal\">true</span>});\n<span class=\"hljs-comment\">// 複数ファイルの選択を不可能にする</span>\n[fileHandle] = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">showOpenFilePicker</span>({<span class=\"hljs-attr\">multiple</span>: <span class=\"hljs-literal\">false</span>});\n</code></pre>\n<p><a href=\"https://wicg.github.io/file-system-access/#api-showopenfilepicker\">参考</a></p>\n<h4>fileHandleの中身</h4>\n<pre><code class=\"language-javascript\">{\n  <span class=\"hljs-attr\">lastModified</span>: <span class=\"hljs-number\">1587625257478</span> <span class=\"hljs-comment\">// ファイル最終更新日時(UNIXタイム)</span>\n  <span class=\"hljs-attr\">lastModifiedDate</span>: <span class=\"hljs-title class_\">Thu</span> <span class=\"hljs-title class_\">Apr</span> <span class=\"hljs-number\">23</span> <span class=\"hljs-number\">2020</span> <span class=\"hljs-number\">16</span>:<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">57</span> <span class=\"hljs-variable constant_\">GMT</span>+<span class=\"hljs-number\">0900</span> (日本標準時) {} <span class=\"hljs-comment\">// ファイル最終更新日時</span>\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;sample.pdf&quot;</span> <span class=\"hljs-comment\">// ファイル名</span>\n  <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">85488</span> <span class=\"hljs-comment\">// ファイルサイズ (単位はバイト)</span>\n  <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;application/pdf&quot;</span> <span class=\"hljs-comment\">// ファイルタイプ （記述のない場合もある）</span>\n  <span class=\"hljs-attr\">webkitRelativePath</span>: <span class=\"hljs-string\">&quot;&quot;</span> <span class=\"hljs-comment\">// フォルダを選択した際に内部のファイル数などを表示できる</span>\n}\n</code></pre>\n<h2>ファイルに書き込む</h2>\n<p>従来のブラウザではそもそも上書きすることが不可能だったのですが、こちらもFile System Access APIでは簡単に書けちゃうんです。</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">const</span> writable = <span class=\"hljs-keyword\">await</span> fileHandle.<span class=\"hljs-title function_\">createWritable</span>();\n<span class=\"hljs-keyword\">await</span> writable.<span class=\"hljs-title function_\">write</span>(contents<span class=\"hljs-comment\">/*⇦書き込む内容*/</span>);\n<span class=\"hljs-keyword\">await</span> writable.<span class=\"hljs-title function_\">close</span>();\n</code></pre>\n<p>さっきファイル情報を代入した<code>fileHandle</code>にcreateWritableメソッドで<a href=\"https://wicg.github.io/file-system-access/#api-filesystemwritablefilestream\">FileSystemWritableFileStream</a>オブジェクトを呼び出します。その後書き込んで、終了するだけ。非常に簡潔な仕様です。</p>\n<p>この時ブラウザでは<br>\n<img src=\"https://user-images.githubusercontent.com/51294895/98450827-64c50d00-2183-11eb-8d55-e9eb95bcf73d.png\" alt=\"image\"><br>\nこんな感じのダイアログが表示され、「変更を保存」ボタンを押すとローカルファイルの上書きが完了します</p>\n<p>これ以降、新たなファイルを読み込むかリロードや手動でfileHandleをリセットするまでは上書き処理を行うと自動でこのファイルが上書きされます。便利な反面、実装を間違えると取り返しのつかないことになりますのでご注意ください。</p>\n<h2>その他の機能</h2>\n<p>FileSystemAccess APIは基本は読み取り/書き込みのみですが、深掘りしていけば色々応用できそうです。<a href=\"https://web.dev/file-system-access/\">Chromeのブログ</a>にはBlob型（画像や音声を取り扱える）の読み取りと書き込みをHTTPリクエストで可能にする方法も少し書いてあるので興味のある方は見てみてください。他にも上書きするファイルを再度ファイルピッカーを起動して選ぶ方法もあったりします。</p>\n<h1>おわりに</h1>\n<p>このAPIはこれまで試験的機能だったこともあってまだ枯れていない段階です。実際、<a href=\"https://wicg.github.io/file-system-access/#drag-and-drop\">ドラッグ&amp;ドロップ機能</a>なども実装はされていますが問題も多く議論が行われている最中です。</p>\n<p>APIの性質上セキュリティがおざなりになるとChromeの脆弱性になり得るので議論中の機能は使うべきではありませんが、今後の動向には注目していきたいです。</p>\n<h1>参考文献</h1>\n<p>WICG仕様書…<a href=\"https://wicg.github.io/file-system-access/\">https://wicg.github.io/file-system-access/</a><br>\nWebDevチームブログ…<a href=\"https://web.dev/file-system-access/\">https://web.dev/file-system-access/</a></p>\n"}