{"meta":{"title":"毎朝5時にGoogle Formに自動回答したい","date":"2020-08-11","category":"Programming","description":"SeleniumとLambdaを使った自動化の記事","ogp":"/media/gfa.webp"},"body":"<p>みなさんこんにちは。夏ですね。<br>\n僕もついに部活動が再開し、ワクワクドキドキな訳ですが、一昨日の夜顧問からこんな連絡がきました。</p>\n<pre><code>- 毎朝5時20分までに検温を行い、結果をGoogleFormから報告してください\n- 報告がなかった部員は朝練の参加を認めません\n</code></pre>\n<p>そもそも朝練が6時半から始まる時点でイッているので5時20分に連絡しろと言われてもさほど驚かなかったのですが、ここで一つ問題が発生しました。</p>\n<p>というのも僕は普段朝5時に起き、そのままパンをかじりながら自転車で駅に向かうので、検温をする時間がないのです。もう少し早起きすれば済む話なのですが、4時起きは流石にきついし体がもたないのでやりたくない。かといって5時に起きて検温なんかしていたら朝練そのものに遅れてしまう。</p>\n<p>というわけで、朝5時くらいに、心配されない程度の体温をよしなに指定のFormに入力して送信してくれるプログラムを作りたいと思います。</p>\n<h2>Seleniumでフォームを送信する</h2>\n<p>本物のフォームを使ってやると僕の身元がバレてしまうので、今回は<a href=\"https://docs.google.com/forms/d/e/1FAIpQLScGgZ8dsBkcSVutvW3JgDLqy3pIEKk12ucjiA8mNQrKopILog/viewform\">テスト用に僕が作成した本物と同じ内容のフォーム</a>で実装したいと思います。</p>\n<h3>初期値入力つきURLを用意する</h3>\n<p>Google Formは、パラメータをつけることで各質問の値を入力した状態でURLを開くことができます。<br>\n普通にフォームを開く際のURLは</p>\n<p><a href=\"https://docs.google.com/forms/d/e/1FAIpQLScGgZ8dsBkcSVutvW3JgDLqy3pIEKk12ucjiA8mNQrKopILog/viewform?usp=sf_link\">https://docs.google.com/forms/d/e/1FAIpQLScGgZ8dsBkcSVutvW3JgDLqy3pIEKk12ucjiA8mNQrKopILog/viewform?usp=sf_link</a></p>\n<p>こんな感じでviewformの後に「usp=sf_link」というパラメータがついています。このパラメータは事前入力のない、ピュアな回答フォームであることを示しているので、まずここを「usp=pp_url」に変えて、事前入力があることを知らせてあげます。<br>\n <br>\n <br>\nそしたら次に各質問の回答をパラメータに入力していきます。フォームの各質問を識別する番号があるので、Chromeの検証画面で質問のdivを探し、2階層目で以下のような番号を探します。<br>\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/502570/d48564de-3d9c-07e0-7aec-755e1b4444d5.jpeg\" alt=\"スクリーンショット 2020-08-07 16.56.07.jpg\"><br>\n番号を見つけたら<code>entry.番号=回答内容</code>の形でパラメータを加えます。今回は名前と体温をテキストで入力するので以下のようなURLになります。</p>\n<p><a href=\"https://docs.google.com/forms/d/e/1FAIpQLScGgZ8dsBkcSVutvW3JgDLqy3pIEKk12ucjiA8mNQrKopILog/viewform?usp=pp_url&amp;entry.1534939278=%E8%8D%92%E5%B7%9D%E6%99%BA%E5%89%87&amp;entry.511939456=36.5\">https://docs.google.com/forms/d/e/1FAIpQLScGgZ8dsBkcSVutvW3JgDLqy3pIEKk12ucjiA8mNQrKopILog/viewform?usp=pp_url&amp;entry.1534939278=荒川智則&amp;entry.511939456=36.5</a><br>\nしかしこのままだと毎日36.5度を報告することになり、流石に怪しまれるので、乱数で良い感じに値を振ります。</p>\n<pre><code class=\"language-python\"><span class=\"hljs-comment\"># 36.1~36.7の間でランダムに値を生成して文字列変換</span>\nbody_temp = <span class=\"hljs-built_in\">str</span>(<span class=\"hljs-number\">36</span> + random.randint(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">7</span>)/<span class=\"hljs-number\">10</span>)\n<span class=\"hljs-comment\"># URLの最後に加える</span>\nurl = <span class=\"hljs-string\">&#x27;https://docs.google.com/forms/d/e/1FAIpQLScGgZ8dsBkcSVutvW3JgDLqy3pIEKk12ucjiA8mNQrKopILog/viewform?usp=pp_url&amp;entry.1534939278=荒川智則&amp;entry.511939456=&#x27;</span>+body_temp\n</code></pre>\n<h3>Seleniumで自動提出</h3>\n<p>URLが完成したら、あとはSeleniumでURLを開き、ポチッと提出ボタンを押してもらうだけです。</p>\n<pre><code class=\"language-python\"><span class=\"hljs-comment\"># SeleniumとChromedriverをpipでインストールしておく</span>\n<span class=\"hljs-keyword\">from</span> selenium <span class=\"hljs-keyword\">import</span> webdriver\n<span class=\"hljs-keyword\">import</span> chromedriver_binary\n<span class=\"hljs-keyword\">import</span> time\n<span class=\"hljs-keyword\">import</span> random\n\nbody_temp = <span class=\"hljs-built_in\">str</span>(<span class=\"hljs-number\">36</span> + random.randint(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">7</span>)/<span class=\"hljs-number\">10</span>)\nurl = <span class=\"hljs-string\">&#x27;https://docs.google.com/forms/d/e/1FAIpQLScGgZ8dsBkcSVutvW3JgDLqy3pIEKk12ucjiA8mNQrKopILog/viewform?usp=pp_url&amp;entry.1534939278=荒川智則&amp;entry.511939456=&#x27;</span>+body_temp\n\n<span class=\"hljs-comment\"># クリックの関数</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">click</span>(<span class=\"hljs-params\">xpath</span>):\n    driver.find_element_by_xpath(xpath).click()\n\n<span class=\"hljs-comment\"># パスワード入力の関数</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert_pw</span>(<span class=\"hljs-params\">xpath, <span class=\"hljs-built_in\">str</span></span>):\n    driver.find_element_by_xpath(xpath).send_keys(<span class=\"hljs-built_in\">str</span>)\n\ndriver = webdriver.Chrome()\ndriver.implicitly_wait(<span class=\"hljs-number\">1</span>)\ndriver.get(url)\n\nmoving_login_button = <span class=\"hljs-string\">&#x27;/html/body/div[2]/div/div[2]/div[3]/div[2]&#x27;</span>\ntime.sleep(<span class=\"hljs-number\">1</span>)\n\n<span class=\"hljs-comment\"># Googleアカウントでのログインが必要な場合はログインする</span>\n<span class=\"hljs-keyword\">if</span>(driver.find_elements_by_xpath(moving_login_button) != []):\n  click(moving_login_button)\n  login_id = <span class=\"hljs-string\">&quot;{Googleアカウントのメアド}&quot;</span>\n  login_id_xpath = <span class=\"hljs-string\">&#x27;/html/body/div[1]/div[1]/div[2]/div/div[2]/div/div/div[2]/div/div[1]/div/form/span/section/div/div/div[1]/div/div[1]/div/div[1]/input&#x27;</span>\n  login_id_button = <span class=\"hljs-string\">&#x27;/html/body/div[1]/div[1]/div[2]/div/div[2]/div/div/div[2]/div/div[2]/div/div[1]/div/div&#x27;</span>\n  insert_pw(login_id_xpath, login_id)\n  click(login_id_button)\n  time.sleep(<span class=\"hljs-number\">1</span>)\n  login_pw = <span class=\"hljs-string\">&quot;{Googleアカウントのパスワード}&quot;</span>\n  login_pw_xpath = <span class=\"hljs-string\">&#x27;/html/body/div[1]/div[1]/div[2]/div/div[2]/div/div/div[2]/div/div[1]/div/form/span/section/div/div/div[1]/div[1]/div/div/div/div/div[1]/div/div[1]/input&#x27;</span>\n  login_pw_button = <span class=\"hljs-string\">&#x27;/html/body/div[1]/div[1]/div[2]/div/div[2]/div/div/div[2]/div/div[2]/div/div[1]/div/div&#x27;</span>\n  insert_pw(login_pw_xpath, login_pw)\n  time.sleep(<span class=\"hljs-number\">1</span>)\n  click(login_pw_button)\n\ntime.sleep(<span class=\"hljs-number\">1</span>)\nsubmit_button = <span class=\"hljs-string\">&#x27;//*[@id=&quot;mG61Hd&quot;]/div[2]/div/div[3]/div[1]/div/div&#x27;</span>\nclick(submit_button)\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Done!&quot;</span>)\n\ndriver.close\n<span class=\"hljs-comment\"># メモリーを食うのでちゃんと終了しましょう</span>\ndriver.quit\n</code></pre>\n<p><img src=\"/media/gfa.webp\" alt=\"img\"></p>\n<p>しっかり送信できました。</p>\n<h2>定期イベントにする</h2>\n<p>コードが書けたらあとは定期イベント化するだけなのですが、ここで少しつまづいたのでやり方を説明しておきます。<br>\n <br>\n <br>\n当初予定していた方法としてはAutomatorでアプリ化し、カレンダーに入れて毎日実行する方法(<a href=\"https://qiita.com/baraobara/items/73d753c678e5c0e72f46#4-mac%E3%81%AE%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E3%81%AEautomator%E3%82%92%E7%94%A8%E3%81%84%E3%81%A6mac%E5%86%85%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E4%BD%9C%E3%82%8B\">参考</a>)。これなら報告しなくて良い日はカレンダーから外せば良いし、完璧なはず。と思ったのですが、PCをシャットダウンしていると動作しないためボツ。crontabに設定して定期イベント化する方法も同様の理由でボツ。</p>\n<p>結局臨機応変にイベントの変更はできないものの、PCの状態にかかわらず実行してくれるAWSのLambdaを使用することに決めました。(Lambdaの使い方は<a href=\"https://www.wakuwakubank.com/posts/519-aws-lambda-introduction/\">このサイト</a>とかが参考になりました)</p>\n<h3>LambdaのレイヤーにSeleniumとChromedriver、headless-chromiumを上げる</h3>\n<p>Lambdaでライブラリを使うには各フォルダをzipに圧縮してレイヤーにアップロードする必要があります。今回はSeleniumとChromeのWebdriverであるChromedriver、それからChromeを開かずにスクレイピングを行うためのheadless-chromiumを使用するので、それぞれzipに圧縮してレイヤーに上げていきます。</p>\n<h4>1. Selenium</h4>\n<pre><code>mkdir selenium\ncd selenium\nmkdir python\ncd python\npip install selenium -t .\ncd ../\nzip -r selenium.zip ./python\n</code></pre>\n<p>できたzipファイルをそのままレイヤーにアップロードします。</p>\n<h4>2. Chromedriverとheadless-chromium</h4>\n<pre><code>curl https://github.com/adieuadieu/serverless-chrome/releases/download/v1.0.0-55/stable-headless-chromium-amazonlinux-2017-03.zip &gt; headless-chromium.zip\ncurl https://chromedriver.storage.googleapis.com/2.43/chromedriver_linux64.zip &gt; chromedriver.zip\n</code></pre>\n<p>できた二つのzipファイルを解凍し、headless-chromeフォルダにまとめます。その後そのheadless-chromeをzipに圧縮してレイヤーにアップロードします。</p>\n<h4>3. レイヤーを関数に適用</h4>\n<p>関数の下にある「Layers」を押し、下の「レイヤーの追加」ボタンから二つのレイヤを追加します<br>\n<img width=\"1612\" alt=\"スクリーンショット 2020-08-07 18.36.45.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/502570/27d63d99-6a12-7370-3e32-46851977176f.png\"></p>\n<h4>※注意※</h4>\n<ul>\n<li>Lambda関数のランタイムをPython3.8にするとChromedriverが動いてくれなかった(原因不明)ので、ランタイムはPython3.6か3.7に設定することをお勧めします。</li>\n<li>headless-chromiumとChromedriverの間に互換性がないと動作しないので<a href=\"http://chromedriver.chromium.org/downloads\">こちら</a>から最新版を入手しても動作しない可能性があります。</li>\n</ul>\n<h3>Lambda用にコードを少し変える</h3>\n<p>筆者は今までCloud9以外のAWSツールを使ったことがないへっぽこコーダーなので、色んなサイトの見様見真似でなんとかLambdaで動くコードにしました。先人に感謝。</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">import</span> json\n<span class=\"hljs-keyword\">from</span> selenium <span class=\"hljs-keyword\">import</span> webdriver\n<span class=\"hljs-keyword\">import</span> time\n<span class=\"hljs-keyword\">import</span> random\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">lambda_handler</span>(<span class=\"hljs-params\">event, context</span>):\n    body_temp = <span class=\"hljs-built_in\">str</span>(<span class=\"hljs-number\">36</span> + random.randint(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">7</span>)/<span class=\"hljs-number\">10</span>)\n    url = <span class=\"hljs-string\">&#x27;https://docs.google.com/forms/d/e/1FAIpQLScGgZ8dsBkcSVutvW3JgDLqy3pIEKk12ucjiA8mNQrKopILog/viewform?usp=pp_url&amp;entry.1534939278=荒川智則&amp;entry.511939456=&#x27;</span>+body_temp\n    options = webdriver.ChromeOptions()\n    options.binary_location = <span class=\"hljs-string\">&#x27;/opt/headless-chrome/headless-chromium&#x27;</span>\n    <span class=\"hljs-comment\"># このオプション4つを付けないとChromeは起動せずエラーになります</span>\n    options.add_argument(<span class=\"hljs-string\">&#x27;--headless&#x27;</span>) <span class=\"hljs-comment\"># サーバーレスでChromeを起動</span>\n    options.add_argument(<span class=\"hljs-string\">&#x27;--no-sandbox&#x27;</span>) <span class=\"hljs-comment\"># sandbox外でChromeを起動</span>\n    options.add_argument(<span class=\"hljs-string\">&#x27;--single-process&#x27;</span>) <span class=\"hljs-comment\"># タブ/サイトごとのマルチプロセスではなく、シングルプロセスへ切り替える</span>\n    options.add_argument(<span class=\"hljs-string\">&#x27;--disable-dev-shm-usage&#x27;</span>) <span class=\"hljs-comment\"># メモリファイルの出力場所を変える</span>\n    driver = webdriver.Chrome(<span class=\"hljs-string\">&#x27;/opt/headless-chrome/chromedriver&#x27;</span>,options = options)\n    driver.implicitly_wait(<span class=\"hljs-number\">1</span>)\n    driver.get(url)\n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">click</span>(<span class=\"hljs-params\">xpath</span>):\n        driver.find_element_by_xpath(xpath).click()\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert_pw</span>(<span class=\"hljs-params\">xpath, <span class=\"hljs-built_in\">str</span></span>):\n        driver.find_element_by_xpath(xpath).send_keys(<span class=\"hljs-built_in\">str</span>)\n    \n    moving_login_button = <span class=\"hljs-string\">&#x27;/html/body/div[2]/div/div[2]/div[3]/div[2]&#x27;</span>\n    time.sleep(<span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-keyword\">if</span>(driver.find_elements_by_xpath(moving_login_button) != []):\n        click(moving_login_button)\n        <span class=\"hljs-comment\"># 環境変数でMY_GMAILにGoogleアカウントのメアドを設定してください</span>\n        login_id = MY_GMAIL\n        login_id_xpath = <span class=\"hljs-string\">&#x27;/html/body/div[1]/div[1]/div[2]/div/div[2]/div/div/div[2]/div/div[1]/div/form/span/section/div/div/div[1]/div/div[1]/div/div[1]/input&#x27;</span>\n        login_id_button = <span class=\"hljs-string\">&#x27;/html/body/div[1]/div[1]/div[2]/div/div[2]/div/div/div[2]/div/div[2]/div/div[1]/div/div&#x27;</span>\n        insert_pw(login_id_xpath, login_id)\n        click(login_id_button)\n        time.sleep(<span class=\"hljs-number\">1</span>)\n        <span class=\"hljs-comment\"># 環境変数でMY_PASSWORDにGoogleアカウントのパスワードを設定してください</span>\n        login_pw = MY_PASSWORD\n        login_pw_xpath = <span class=\"hljs-string\">&#x27;/html/body/div[1]/div[1]/div[2]/div/div[2]/div/div/div[2]/div/div[1]/div/form/span/section/div/div/div[1]/div[1]/div/div/div/div/div[1]/div/div[1]/input&#x27;</span>\n        login_pw_button = <span class=\"hljs-string\">&#x27;/html/body/div[1]/div[1]/div[2]/div/div[2]/div/div/div[2]/div/div[2]/div/div[1]/div/div&#x27;</span>\n        insert_pw(login_pw_xpath, login_pw)\n        time.sleep(<span class=\"hljs-number\">1</span>)\n        click(login_pw_button)\n    time.sleep(<span class=\"hljs-number\">1</span>)\n    submit_button = <span class=\"hljs-string\">&#x27;//*[@id=&quot;mG61Hd&quot;]/div[2]/div/div[3]/div[1]/div/div&#x27;</span>\n    click(submit_button)\n    driver.close\n    driver.quit\n    <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-string\">&#x27;statusCode&#x27;</span>: <span class=\"hljs-number\">200</span>,\n        <span class=\"hljs-string\">&#x27;body&#x27;</span>: json.dumps(<span class=\"hljs-string\">&#x27;Form submission success!!&#x27;</span>)\n    }\n\n</code></pre>\n<h4>注意点</h4>\n<ul>\n<li>Chromeの起動オプション<code>--headless</code>,<code>--no-sandbox</code>,<code>single-process</code>,<code>--disable-dev-shm-usage</code>を付けないとLambda上で正常に起動せず、エラーが出ます。各オプションについての詳細は<a href=\"http://chrome.half-moon.org/43.html\">こちら</a>をご覧ください</li>\n<li>レイヤーにアップロードしたファイルはoptディレクトリの配下に置かれます。パスを指定する際はopt/ディレクトリ名/…の形で表記しましょう</li>\n</ul>\n<h3>CloudWatch Eventsでトリガーを設定</h3>\n<ol>\n<li>関数の「Layers」をクリックして「トリガーを追加をクリック」し、ドロップダウンから「EventBridge (CloudWatch Events)」を選択します。</li>\n<li>ルールは「新規ルールの作成」で任意のルール名を入力。ルールタイプをスケジュール式にし、今回は毎日朝5時なので<code>corn(0 20 ? * * *)</code>と入力(LambdaはUTCでトリガーされるので9時間前をセットすることに留意)。トリガーを有効にして「追加」をクリックします。（cronの書き方は<a href=\"https://qiita.com/tossh/items/e135bd063a50087c3d6a\">こちら</a>をご覧ください）</li>\n</ol>\n<img width=\"810\" alt=\"スクリーンショット 2020-08-07 18.56.44.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/502570/2c07b4d3-295d-7543-7de7-dc8b0efaf40b.png\">\n<h2>テスト</h2>\n<p>最後にしっかり動くかテストしましょう。Lambda関数画面の「テスト」をクリックします。<br>\n<img width=\"1613\" alt=\"スクリーンショット 2020-08-07 18.51.28.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/502570/8418067e-0784-9b2c-feeb-624c132e277d.png\"><br>\n大丈夫そうですね。</p>\n<h2>おわりに</h2>\n<p>朝の検温はサボっていますが、寝る前にちゃんと測っているので安心してください。</p>\n<h2>参考文献</h2>\n<p><a href=\"https://masakimisawa.com/selenium_headless-chrome_python_on_lambda/\">https://masakimisawa.com/selenium_headless-chrome_python_on_lambda/</a><br>\n<a href=\"https://github.com/heroku/heroku-buildpack-google-chrome/issues/56\">https://github.com/heroku/heroku-buildpack-google-chrome/issues/56</a><br>\n<a href=\"https://qiita.com/mishimay/items/afd7f247f101fbe25f30\">https://qiita.com/mishimay/items/afd7f247f101fbe25f30</a></p>\n"}