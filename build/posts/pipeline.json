{"meta":{"title":"パイプライン処理と高速化","date":"2021-01-14","category":"Computer Science","description":"プロセッサーの役割分担と人海戦術","ogp":"/media/pipeline.png"},"body":"<p>最近、基本情報技術者試験の勉強をする中でパイプライン処理について少し調べたので備忘録的に書き残しておきます。Zennに書こうとも思いましたがあっちにはもっと有益な記事だけ残していきたいのでしょうもない備忘録はこっちに書きます。</p>\n<h2>パイプライン処理ってなに？</h2>\n<p>パイプライン処理とは、CPUが複数の命令を実行段階をずらしながら同時並行的に実行することでスループットの向上を目指すという処理方式のことです。ここでいう実行段階とは、</p>\n<ol>\n<li>実行プログラムをメモリからレジスタに読み込む<strong>命令フェッチ</strong></li>\n<li>実行プログラムを解析して実行準備を行う<strong>命令デコード</strong></li>\n<li>CPUの演算ユニットで実際に演算を行う<strong>実行</strong></li>\n<li>演算結果をメモリに書き込む<strong>ライトバック</strong></li>\n</ol>\n<p>の4段階に分かれます。もっと細かく分ける場合もありますがとりあえずこの4ステップということにしておきます。<br>\n従来の原始的なCPUの処理であれば、この4段階を順番に実行し、一つの命令が完了したら次の命令に移るという逐次処理を行うのですが、命令が複雑になるにつれそれではスループットが大幅に低下し処理性能が落ちてしまいます。そこで考案されたのがパイプライン処理です。パイプライン処理ではこの4段階を一つずつずらして並列処理を行うことで、従来の処理よりも高速に、複数の命令の実行を可能にしたのです。<br>\n<img src=\"/media/pipeline.png\" alt=\"pipeline-processing\"><br>\n<span style=\"font-style:italic; font-size: 13px; color:#888888;\">Uploaded by Jean-Christophe Le Lann - researchgate.net</span><br></p>\n<h3>スーパー・パイプライン</h3>\n<p>上記のパイプライン処理より高速なスループットを実現するのがスーパー・パイプラインという処理方式です。スーパー・パイプラインでは、上記のパイプライン処理で4分割したステップのそれぞれをさらに2分割することで各ステップの処理をさらに単純化し、通常のパイプライン処理よりももっと高速な並列処理を実現しようという方式です。</p>\n<h3>スーパースカラー</h3>\n<p>スーパー・パイプラインと並んで通常のパイプライン処理を強化するもう一つの方法がスーパースカラーです。スーパースカラーはパイプライン処理を行うCPU等のプロセッサを複数動作させることで、ハードウェアレベルでスペックを上げてスループットを上げるという処理方式です。言うたら人海戦術です。ただスーパースカラーの場合、片方の演算結果をもう片方の演算に利用する場合等必ずしも同時にデコードされた複数の命令を並列に実行できないこともあるため、単純にプロセッサーが2倍になったからといって処理性能が2倍になるわけではありません。<br>\n<img src=\"https://www.ap-siken.com/kakomon/27_haru/img/09.gif\" alt=\"extra-pipeline\"><br>\n<span style=\"font-style:italic; font-size: 13px; color:#888888;\"><a href=\"http://semirara.sota1235.net/general/%E3%82%B9%E3%83%BC%E3%83%91%E3%83%BC%E3%82%B9%E3%82%AB%E3%83%A9\">http://semirara.sota1235.net/general/スーパースカラ</a></span><br></p>\n<h2>パイプライン・ハザード</h2>\n<p>このパイプライン処理によってCPUの処理性能は大幅に上がったわけですが、従来のCPUでは起こり得なかった<strong>パイプライン・ハザード</strong>という問題が浮かび上がりました。<br>\nパイプライン・ハザードとは、主に依存関係のある命令同士で発生する、ある命令がライトバックを行わないうちに後続の命令がそのレジスタを読み込みに行ってしまう場合などのエラーです。これが起きると、理想的なパイプライン処理の場合1になるはずのCPI(Cycles Per Instruction)が大きくなる、つまりスループットが大幅に低下することになります。</p>\n<p>このパイプライン・ハザードを防ぐために分岐予測やNop代入などさまざまな方法があるのですが、それについてはまた後ほど書きたいと思います</p>\n"}