{"meta":{"title":"Pythonで円周率を求めてみる","date":"2020-09-25","category":"Programming","description":"確率的モデルで実際に計算してみる。図も描いてみちゃう","ogp":"/media/pypi.webp"},"body":"<p>単に円周率を使いたいなら</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">import</span> math\n<span class=\"hljs-built_in\">print</span>(math.py)\n</code></pre>\n<p>で良いんだけども、3.14がどうやって求まっているのか自分でやってみたい。<br>\nというわけで確率的モデルで円周率を求めていきたいと思います。</p>\n<h3>第一象限の適当なところに点を打っていく</h3>\n<p>まずx座標とy座標それぞれで、0から1のランダムな数値を定めて点を打ちます</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">import</span> random\nx, y = random.random(), random.random()\n</code></pre>\n<h3>x^2+y^2が1以内かどうか確かめる</h3>\n<p>このxとyをそれぞれ2乗してお互いに足し合わせた数が1以内であれば、点は半径1の円の内側にあることになります。</p>\n<pre><code class=\"language-python\">number = x ** <span class=\"hljs-number\">2</span> + y ** <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">#これが1以内であれば円の内側</span>\n</code></pre>\n<h3>何回も繰り返して近似値を見る</h3>\n<p>これを何回も繰り返して、繰り返した数を分母、1以内だった回数×4(全ての象限で同じ結果になると仮定する)を分子とすると、円周率が算出されます。試しに1000回くらい繰り返してみましょう。</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">import</span> random\n\nincount = <span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">GenerateRandom</span>():\n  x, y = random.random(), random.random()\n  number = x ** <span class=\"hljs-number\">2</span> + y ** <span class=\"hljs-number\">2</span>\n  <span class=\"hljs-keyword\">return</span> number\n\niteration = <span class=\"hljs-number\">1000</span>\n\n<span class=\"hljs-keyword\">for</span> ite <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(iteration):\n  check = GenerateRandom()\n  <span class=\"hljs-keyword\">if</span> (check &lt; <span class=\"hljs-number\">1</span>):\n    incount += <span class=\"hljs-number\">1</span>\n\nquadrant = <span class=\"hljs-number\">4</span> <span class=\"hljs-comment\">#全象限</span>\n\n<span class=\"hljs-built_in\">print</span>(incount * quadrant / iteration)\n</code></pre>\n<pre><code>3.2\n</code></pre>\n<p>うーん、微妙。数が少なかったようなので1000万回で試してみましょう。</p>\n<pre><code class=\"language-python\"><span class=\"hljs-comment\"># 5秒くらいかかります</span>\n<span class=\"hljs-number\">3.141382</span>\n</code></pre>\n<p>良きかな。</p>\n<h2>可視化してみる</h2>\n<p>数字が出ただけだとあんまり感動しなかったのでmatplotlibで可視化してみましょう。</p>\n<p>まずは1000回バージョン</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">import</span> random\n<span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">GenerateRandom</span>():\n  x, y = random.random(), random.random()\n  number = x ** <span class=\"hljs-number\">2</span> + y ** <span class=\"hljs-number\">2</span>\n  <span class=\"hljs-keyword\">return</span> [number, x, y]\n\niteration = <span class=\"hljs-number\">1000</span>\n\n<span class=\"hljs-keyword\">for</span> ite <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(iteration):\n  check = GenerateRandom()\n  <span class=\"hljs-keyword\">if</span> (check[<span class=\"hljs-number\">0</span>] &lt; <span class=\"hljs-number\">1</span>):\n    plt.scatter(check[<span class=\"hljs-number\">1</span>], check[<span class=\"hljs-number\">2</span>], c = <span class=\"hljs-string\">&#x27;red&#x27;</span>, s = <span class=\"hljs-number\">10</span>)\n  <span class=\"hljs-keyword\">else</span>:\n    plt.scatter(check[<span class=\"hljs-number\">1</span>], check[<span class=\"hljs-number\">2</span>], c=<span class=\"hljs-string\">&#x27;blue&#x27;</span>, s = <span class=\"hljs-number\">10</span>)\n\nplt.title(<span class=\"hljs-string\">&#x27;Monte Carlo Method&#x27;</span>)\nplt.xlabel(<span class=\"hljs-string\">&quot;x&quot;</span>)\nplt.ylabel(<span class=\"hljs-string\">&quot;y&quot;</span>)\nplt.show()\n</code></pre>\n<p>10秒くらい待つと…</p>\n<p><img src=\"/media/pypi.webp\" alt=\"スクリーンショット 2020-08-17 13.46.37.png\"></p>\n<p>イマイチ分かりにくいので1000万回バージョンをみてみましょう。</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">import</span> random\n<span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">GenerateRandom</span>():\n  x, y = random.random(), random.random()\n  number = x ** <span class=\"hljs-number\">2</span> + y ** <span class=\"hljs-number\">2</span>\n  <span class=\"hljs-keyword\">return</span> [number, x, y]\n\niteration = <span class=\"hljs-number\">10000000</span>\n\n<span class=\"hljs-keyword\">for</span> ite <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(iteration):\n  check = GenerateRandom()\n  <span class=\"hljs-keyword\">if</span> (check[<span class=\"hljs-number\">0</span>] &lt; <span class=\"hljs-number\">1</span>):\n    plt.scatter(check[<span class=\"hljs-number\">1</span>], check[<span class=\"hljs-number\">2</span>], c = <span class=\"hljs-string\">&#x27;red&#x27;</span>, s = <span class=\"hljs-number\">10</span>)\n  <span class=\"hljs-keyword\">else</span>:\n    plt.scatter(check[<span class=\"hljs-number\">1</span>], check[<span class=\"hljs-number\">2</span>], c=<span class=\"hljs-string\">&#x27;blue&#x27;</span>, s = <span class=\"hljs-number\">10</span>)\n\nplt.title(<span class=\"hljs-string\">&#x27;Monte Carlo Method&#x27;</span>)\nplt.xlabel(<span class=\"hljs-string\">&quot;x&quot;</span>)\nplt.ylabel(<span class=\"hljs-string\">&quot;y&quot;</span>)\nplt.show()\n</code></pre>\n<p>これを実行したら一旦パソコンから離れて散歩でもしましょう。帰ってきた頃には処理が終わっているはずです。</p>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/502570/58906dc5-be4f-8f52-ec53-32eabef5cbc6.png\" alt=\"スクリーンショット 2020-08-17 13.47.54.png\"></p>\n<p>グラフを正方形にすればより分かりやすいですが、綺麗に弧を描いて分布しているのが分かります。</p>\n<hr>\n<p>これを計算したからといって何か生まれるわけでもありませんが、興味を持った方は試していただけると嬉しいです。</p>\n<h3>参考</h3>\n<h5>情報処理学会のYouTube</h5>\n<p><a href=\"https://www.youtube.com/watch?v=iycXxv3UKpo\">https://www.youtube.com/watch?v=iycXxv3UKpo</a></p>\n"}