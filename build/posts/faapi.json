{"meta":{"title":"ブラウザからローカルフォントを取得する","date":"2020-11-25","category":"Programming","description":"Font Access APIでローカルにアクセス","ogp":"/media/faapi.webp"},"body":"<p>Chrome87よりブラウザ上でインストール済みのフォントを調べるFont Access APIがOrigin Trialsに公開されました。正直このAPIで何か作ろうとは思っていませんが、このAPIを欲するいつの日かのために少し調べたので書き残しておきます。</p>\n<div class=\"message\">\n先述の通りこのAPIはChrome87~以外の環境下では動作しません。本番環境で使って怒られても知りません\n</div>\n<h1>Quick Start</h1>\n<h2>Origin Trialsでトークンを取得する</h2>\n<p>Origin Trialsを利用したことがある方は飛ばして大丈夫です。<br>\nまずは<a href=\"chrome://flags/#font-access\">Chrome FlagsのFont Access API</a>をenableに変更します。その後<a href=\"https://developers.chrome.com/origintrials/#/view_trial/-7289075996899147775\">Origin TrialsページのLocal Font Access</a>をRegisterします。するとトークンが発行されますので</p>\n<pre><code class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;origin-trial&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;ここにトークンを貼る&quot;</span>&gt;</span>\n</code></pre>\n<p>このmetaタグをソースコードに挿入します。</p>\n<h2>APIが使えるかどうか</h2>\n<p>まずこのAPIが使用できるかどうかを確認しておきましょう。</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-string\">&#x27;fonts&#x27;</span> <span class=\"hljs-keyword\">in</span> navigator) <span class=\"hljs-keyword\">return</span>;\n<span class=\"hljs-keyword\">const</span> status = <span class=\"hljs-keyword\">await</span> navigator.<span class=\"hljs-property\">permissions</span>.<span class=\"hljs-title function_\">query</span>({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;font-access&quot;</span> });\n  <span class=\"hljs-keyword\">if</span> (status.<span class=\"hljs-property\">state</span> === <span class=\"hljs-string\">&quot;granted&quot;</span>)\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;permission was granted 👍&quot;</span>);\n  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (status.<span class=\"hljs-property\">state</span> === <span class=\"hljs-string\">&quot;prompt&quot;</span>)\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;permission will be requested&quot;</span>);\n  <span class=\"hljs-keyword\">else</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;permission was denied 👎&quot;</span>);\n</code></pre>\n<p>Chrome87以上であれば問題ありませんがそうでないブラウザの場合は他の処理で代用するしかないでしょう。</p>\n<h2>フォントオブジェクトを取得する</h2>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">const</span> iterableFontObject = navigator.<span class=\"hljs-property\">fonts</span>.<span class=\"hljs-title function_\">query</span>();\n</code></pre>\n<p>この変数には非同期イテレータ(<a href=\"https://ja.javascript.info/async-iterators-generators\">Asynchronous Iterator</a>)が代入されます。つまり<code>for await of</code>でイテレート処理ができるわけです。</p>\n<h2>メタデータを取得する</h2>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">await</span> (<span class=\"hljs-keyword\">const</span> metadata <span class=\"hljs-keyword\">of</span> iterableFontObject) {\n  <span class=\"hljs-keyword\">const</span> fontFamily = metadata.<span class=\"hljs-property\">family</span>; <span class=\"hljs-comment\">// e.g.ComicSansMS</span>\n  <span class=\"hljs-keyword\">const</span> postscriptName = metadata.<span class=\"hljs-property\">postscriptName</span>; <span class=\"hljs-comment\">// e.g.Comic Sans MS</span>\n  <span class=\"hljs-keyword\">const</span> fullName = metadata.<span class=\"hljs-property\">fullName</span>; <span class=\"hljs-comment\">// e.g.Comic Sans MS</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(fontFamily, postscriptName, fullName);\n}\n</code></pre>\n<p>現状文字列として取得できるデータはこの3つのようです。postscriptNameは確実にユニークで、OpenTypeフォーマットでなくてもUserAgentがよしなに導出してくれるようです。<br>\n非同期イテレータは<code>Object.keys().length</code>ではフォント数の算出はできないので、イテレートついでに数えておくのが一番手っ取り早いかと。</p>\n<h1>SFNTデータにアクセスする</h1>\n<p><code>blob()</code>メソッドを使用すればsfntにフルアクセスすることが可能です。sfntデータにアクセスして何が嬉しいのかというとフォントのフォーマット、PostScript, TrueType, OpenType, WOFFなどが得られるというわけです。これに関してはまじで使い道が分からん。とりあえず実装していきます。</p>\n<h2>SFNTバージョンを取得する</h2>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">const</span> fonts = navigator.<span class=\"hljs-property\">fonts</span>.<span class=\"hljs-title function_\">query</span>();\n<span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">await</span> (<span class=\"hljs-keyword\">const</span> metadata <span class=\"hljs-keyword\">of</span> fonts) {\n  <span class=\"hljs-keyword\">const</span> sfnt = <span class=\"hljs-keyword\">await</span> metadata.<span class=\"hljs-title function_\">blob</span>();\n  <span class=\"hljs-keyword\">const</span> sfntVersion = (<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TextDecoder</span>).<span class=\"hljs-title function_\">decode</span>(\n    <span class=\"hljs-keyword\">await</span> sfnt.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>).<span class=\"hljs-title function_\">arrayBuffer</span>()\n  );\n}\n</code></pre>\n<p><code>blob()</code>メソッドでBlob型のバイナリーデータを取得します。どうやらこのデータをデコードして、最初の4バイトを取得するとSFNTバージョンを取得できるらしいです。すげー。詳しくは<a href=\"https://docs.microsoft.com/en-us/typography/opentype/spec/otff#organization-of-an-opentype-font\">MSの仕様書</a>をご覧ください。</p>\n<p>ただこのままではなんのデータか分からないので拡張子形式に変換していきましょう。</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">await</span> (<span class=\"hljs-keyword\">const</span> metadata <span class=\"hljs-keyword\">of</span> fonts) {\n  <span class=\"hljs-keyword\">let</span> outlineFormat = <span class=\"hljs-string\">&#x27;UNKNOWN&#x27;</span>;\n  <span class=\"hljs-keyword\">switch</span> (sfntVersion) {\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;\\x00\\x01\\x00\\x00&#x27;</span>:\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;true&#x27;</span>:\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;typ1&#x27;</span>:\n      outlineFormat = <span class=\"hljs-string\">&#x27;.ttf&#x27;</span>;\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;OTTO&#x27;</span>:\n      outlineFormat = <span class=\"hljs-string\">&#x27;.cff&#x27;</span>;\n      <span class=\"hljs-keyword\">break</span>;\n  }\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Format Extension:&#x27;</span>, outlineFormat, metadata.<span class=\"hljs-property\">family</span>);\n}\n</code></pre>\n<p>現在AppleでサポートされているフォントはTrueType(.ttf)かPostscript(.cff)のどちらかなので、それに合わせてSFNTバージョンを絞っていきます。これまじで何に使うんだろうか。</p>\n<h1>セキュリティの懸念と対策</h1>\n<p>最近<a href=\"https://zenn.dev/kota_yata/articles/6baecf59f0b3a39ea5a6\">File System Access API</a>などローカルのシステムにアクセスするAPIが増えていますが、やはり怖いのはセキュリティです。</p>\n<h2>フィンガープリント対策</h2>\n<p>Font Access APIは取得したフォントをアルファベット順にソートして返します。これは、システムにインストールされた順番のままフォントのリストを返してしまうと、フィンガープリントに利用され、ユーザーの識別に使われる可能性が高いからです。数百のフォントを全く同じ順番でインストールする複数のユーザーなどそういないですからね。</p>\n<h2>リクエストシステム</h2>\n<p>最初の方のパーミッションリクエストの部分がこれです。メタタグを使用してリクエストを送信しない限り使用できないようにすることでAPIの濫用を防いでいます。<br>\n<a href=\"https://chromium.googlesource.com/chromium/src/+/lkgr/docs/security/permissions-for-powerful-web-platform-features.md\">https://chromium.googlesource.com/chromium/src/+/lkgr/docs/security/permissions-for-powerful-web-platform-features.md</a></p>\n<p>(この記事でも先述のFile System Access APIがケーススタディとして紹介されています)<br>\nただ、最初にメタタグなしでパーミッション確認もなしで実行してみたところ普通に動いてしまったので、筆者も???となっているところです。</p>\n<h2>ユーザーの実行動作</h2>\n<p>実はこのAPIは今までのコードを非同期即時関数に入れただけでは動きません。ロードしたら自動的に動作することを許可すると大抵良いことはないので、ボタンをクリックする、何かのキーを打つなどユーザーが自ら実行することでしか動かないような仕様になっています。(e.g.<code>~.addEventListner()</code>)</p>\n<h2>確認ダイアログの表示</h2>\n<p>このAPIを実行する動作をユーザーが行うと、<br>\n<img src=\"https://storage.googleapis.com/zenn-user-upload/m5dz76ntrrdeq4zio8x31iyt8xao\" alt=\"dialog\"><br>\nこのダイアログが表示されます。これは他のローカルにアクセスするAPIでも同様の仕様のものが多いです。</p>\n<h1>デモとソースコード</h1>\n<p>ChromeのWebDevチームがGlitchにデモサイトとコードを公開しています。</p>\n<p><a href=\"https://local-font-access.glitch.me/demo/\">https://local-font-access.glitch.me/demo/</a></p>\n<p>ほぼ似たようなものですが僕の書いたソースコードも投げておきます。</p>\n<h4>Quick Startの方</h4>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">AccessFont</span> = <span class=\"hljs-keyword\">async</span> () =&gt; {\n  <span class=\"hljs-keyword\">const</span> status = <span class=\"hljs-keyword\">await</span> navigator.<span class=\"hljs-property\">permissions</span>.<span class=\"hljs-title function_\">query</span>({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;font-access&quot;</span> });\n  <span class=\"hljs-keyword\">if</span> (status.<span class=\"hljs-property\">state</span> === <span class=\"hljs-string\">&quot;granted&quot;</span>){\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;permission was granted 👍&quot;</span>);\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (status.<span class=\"hljs-property\">state</span> === <span class=\"hljs-string\">&quot;prompt&quot;</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;permission will be requested&quot;</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;permission was denied 👎&quot;</span>);\n  }\n  <span class=\"hljs-keyword\">const</span> iterableFontObject = navigator.<span class=\"hljs-property\">fonts</span>.<span class=\"hljs-title function_\">query</span>();\n  <span class=\"hljs-keyword\">let</span> total = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">await</span> (<span class=\"hljs-keyword\">const</span> metadata <span class=\"hljs-keyword\">of</span> iterableFontObject) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(metadata.<span class=\"hljs-property\">fullName</span>);\n    total++;\n  }\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Total number of local fonts : <span class=\"hljs-subst\">${total}</span>`</span>);\n}\n<span class=\"hljs-keyword\">const</span> button = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;test&quot;</span>);\nbutton.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-title class_\">AccessFont</span>); <span class=\"hljs-comment\">// ユーザーの動作がないと動かせない</span>\n</code></pre>\n<h4>SFNTアクセスの方</h4>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Access</span>SFNT = <span class=\"hljs-keyword\">async</span> () =&gt; {\n  <span class=\"hljs-keyword\">const</span> fonts = navigator.<span class=\"hljs-property\">fonts</span>.<span class=\"hljs-title function_\">query</span>();\n  <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">await</span> (<span class=\"hljs-keyword\">const</span> metadata <span class=\"hljs-keyword\">of</span> fonts) {\n    <span class=\"hljs-keyword\">const</span> sfnt = <span class=\"hljs-keyword\">await</span> metadata.<span class=\"hljs-title function_\">blob</span>();\n    <span class=\"hljs-keyword\">const</span> sfntVersion = (<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TextDecoder</span>).<span class=\"hljs-title function_\">decode</span>(\n      <span class=\"hljs-keyword\">await</span> sfnt.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>).<span class=\"hljs-title function_\">arrayBuffer</span>()\n    );\n    <span class=\"hljs-keyword\">let</span> outlineFormat = <span class=\"hljs-string\">&#x27;UNKNOWN&#x27;</span>;\n    <span class=\"hljs-keyword\">switch</span> (sfntVersion) {\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;\\x00\\x01\\x00\\x00&#x27;</span>:\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;true&#x27;</span>:\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;typ1&#x27;</span>:\n        outlineFormat = <span class=\"hljs-string\">&#x27;.ttf&#x27;</span>;\n\t<span class=\"hljs-keyword\">break</span>;\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;OTTO&#x27;</span>:\n        outlineFormat = <span class=\"hljs-string\">&#x27;.cff&#x27;</span>;\n        <span class=\"hljs-keyword\">break</span>;\n    }\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Format Extension:&#x27;</span>, outlineFormat, metadata.<span class=\"hljs-property\">family</span>);\n  }\n}\n<span class=\"hljs-keyword\">const</span> access = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;access&quot;</span>);\naccess.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-title class_\">Access</span>SFNT); <span class=\"hljs-comment\">// ユーザーの動作がないと動かせない</span>\n</code></pre>\n<h1>終わりに</h1>\n<p>最初に記事を書いたときは本気で何に使うのか分からないAPIでしたが、どうやらFigmaとかその他デザインアプリケーション、CADに特化したフォントをWebで使う際に役立つようです。</p>\n<blockquote>\n<p>Bringing design apps like Figma, Gravit, and Photopea, to the web is great.<br>\nFor example, corporate logo fonts, or specialized fonts for CAD and other design applications.</p>\n</blockquote>\n<p><a href=\"https://developers.google.com/web/updates/2020/11/nic87#font-access\">https://developers.google.com/web/updates/2020/11/nic87#font-access</a></p>\n<h3>参考文献</h3>\n<p><a href=\"https://wicg.github.io/local-font-access/#current-language\">WICG仕様書</a></p>\n<p><a href=\"https://web.dev/local-fonts/\">Web.devチームブログ(最初に読むならこれ)</a></p>\n<p><a href=\"https://glitch.com/~local-font-access\">Web.devチームGlitchデモ</a></p>\n<p><a href=\"https://developers.google.com/web/updates/2020/11/nic87\">Chrome87の新機能まとめ(公式)</a></p>\n<p><a href=\"https://www.chromestatus.com/feature/6234451761692672\">Chrome Platform Status</a></p>\n<p><a href=\"https://chromium.googlesource.com/chromium/src/+/lkgr/docs/security/permissions-for-powerful-web-platform-features.md\">APIのパーミッションに関するChromeの文献</a></p>\n<p><a href=\"https://nixeneko.hatenablog.com/entry/2018/06/20/000000\">https://nixeneko.hatenablog.com/entry/2018/06/20/000000</a></p>\n"}